
sn2_td1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000068  08004d78  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004d78  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9b7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002250  00000000  00000000  0002da92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090d  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273f5  00000000  00000000  000311dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6f9  00000000  00000000  000585d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb7e1  00000000  00000000  00067ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003574  00000000  00000000  001534ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00156a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c58 	.word	0x08004c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004c58 	.word	0x08004c58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b38      	ldr	r3, [pc, #224]	; (80005bc <MX_GPIO_Init+0xf8>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a37      	ldr	r2, [pc, #220]	; (80005bc <MX_GPIO_Init+0xf8>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b35      	ldr	r3, [pc, #212]	; (80005bc <MX_GPIO_Init+0xf8>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	4b32      	ldr	r3, [pc, #200]	; (80005bc <MX_GPIO_Init+0xf8>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a31      	ldr	r2, [pc, #196]	; (80005bc <MX_GPIO_Init+0xf8>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <MX_GPIO_Init+0xf8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a2b      	ldr	r2, [pc, #172]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b29      	ldr	r3, [pc, #164]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b26      	ldr	r3, [pc, #152]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a25      	ldr	r2, [pc, #148]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2101      	movs	r1, #1
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 ffa9 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f000 ffa3 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	481a      	ldr	r0, [pc, #104]	; (80005c0 <MX_GPIO_Init+0xfc>)
 8000558:	f000 ff9e 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000562:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	4814      	ldr	r0, [pc, #80]	; (80005c4 <MX_GPIO_Init+0x100>)
 8000574:	f000 fde6 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8000578:	2321      	movs	r3, #33	; 0x21
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fdd7 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0xfc>)
 80005ae:	f000 fdc9 	bl	8001144 <HAL_GPIO_Init>

}
 80005b2:	bf00      	nop
 80005b4:	3728      	adds	r7, #40	; 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000400 	.word	0x48000400
 80005c4:	48000800 	.word	0x48000800

080005c8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <_write+0x28>)
 80005e0:	f002 fe5c 	bl	800329c <HAL_UART_Transmit>
	return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000fc 	.word	0x200000fc

080005f4 <HAL_UART_RxCpltCallback>:
// Interruptions
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* uart){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &uart2_data, 1, HAL_MAX_DELAY);
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2201      	movs	r2, #1
 8000602:	4906      	ldr	r1, [pc, #24]	; (800061c <HAL_UART_RxCpltCallback+0x28>)
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <HAL_UART_RxCpltCallback+0x2c>)
 8000606:	f002 fe49 	bl	800329c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &uart2_data, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	4903      	ldr	r1, [pc, #12]	; (800061c <HAL_UART_RxCpltCallback+0x28>)
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <HAL_UART_RxCpltCallback+0x2c>)
 8000610:	f002 fece 	bl	80033b0 <HAL_UART_Receive_IT>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000090 	.word	0x20000090
 8000620:	200000fc 	.word	0x200000fc

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fc06 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f824 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f7ff ff48 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 fa04 	bl	8000a40 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000638:	f000 f87a 	bl	8000730 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	// uint8_t Data;
  vu_init(&h_vu, &hspi3);
 800063c:	4909      	ldr	r1, [pc, #36]	; (8000664 <main+0x40>)
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0x44>)
 8000640:	f000 fa8a 	bl	8000b58 <vu_init>
  vu_blink(&h_vu);
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <main+0x44>)
 8000646:	f000 fb69 	bl	8000d1c <vu_blink>

	printf("\r\n==================================================================\n");
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0x48>)
 800064c:	f003 ff6e 	bl	800452c <puts>
	HAL_UART_Receive_IT(&huart2, &uart2_data, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	4907      	ldr	r1, [pc, #28]	; (8000670 <main+0x4c>)
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <main+0x50>)
 8000656:	f002 feab 	bl	80033b0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		vu_blink(&h_vu);
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <main+0x44>)
 800065c:	f000 fb5e 	bl	8000d1c <vu_blink>
 8000660:	e7fb      	b.n	800065a <main+0x36>
 8000662:	bf00      	nop
 8000664:	20000094 	.word	0x20000094
 8000668:	20000084 	.word	0x20000084
 800066c:	08004c70 	.word	0x08004c70
 8000670:	20000090 	.word	0x20000090
 8000674:	200000fc 	.word	0x200000fc

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	; 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 f830 	bl	80046ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069e:	f000 ff21 	bl	80014e4 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 f837 	bl	800071a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c6:	230a      	movs	r3, #10
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 ff58 	bl	8001590 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006e6:	f000 f818 	bl	800071a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fb20 	bl	8001d48 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f804 	bl	800071a <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3758      	adds	r7, #88	; 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071e:	b672      	cpsid	i
}
 8000720:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 feb5 	bl	8001498 <HAL_GPIO_WritePin>
	while (1)
 800072e:	e7fe      	b.n	800072e <Error_Handler+0x14>

08000730 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_SPI3_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_SPI3_Init+0x74>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI3_Init+0x74>)
 800074a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800074e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI3_Init+0x74>)
 800075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI3_Init+0x74>)
 800077e:	2207      	movs	r2, #7
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI3_Init+0x74>)
 800078a:	2208      	movs	r2, #8
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000790:	f002 f9ba 	bl	8002b08 <HAL_SPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800079a:	f7ff ffbe 	bl	800071a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000094 	.word	0x20000094
 80007a8:	40003c00 	.word	0x40003c00

080007ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <HAL_SPI_MspInit+0xb4>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d144      	bne.n	8000858 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	4a24      	ldr	r2, [pc, #144]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 80007d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d8:	6593      	str	r3, [r2, #88]	; 0x58
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_SPI_MspInit+0xb8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000816:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000828:	2306      	movs	r3, #6
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <HAL_SPI_MspInit+0xbc>)
 8000834:	f000 fc86 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000848:	2306      	movs	r3, #6
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <HAL_SPI_MspInit+0xc0>)
 8000854:	f000 fc76 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40003c00 	.word	0x40003c00
 8000864:	40021000 	.word	0x40021000
 8000868:	48000800 	.word	0x48000800
 800086c:	48000400 	.word	0x48000400

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 faf4 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e00a      	b.n	8000934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091e:	f3af 8000 	nop.w
 8000922:	4601      	mov	r1, r0
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	b2ca      	uxtb	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf0      	blt.n	800091e <_read+0x12>
  }

  return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	605a      	str	r2, [r3, #4]
  return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f003 fed2 	bl	8004788 <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20018000 	.word	0x20018000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	200000f8 	.word	0x200000f8
 8000a18:	200002d8 	.word	0x200002d8

08000a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <MX_USART2_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a84:	f002 fbbc 	bl	8003200 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f7ff fe44 	bl	800071a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000fc 	.word	0x200000fc
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0ac      	sub	sp, #176	; 0xb0
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2288      	movs	r2, #136	; 0x88
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fe13 	bl	80046ec <memset>
  if(uartHandle->Instance==USART2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <HAL_UART_MspInit+0xb0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d13b      	bne.n	8000b48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fb57 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ae8:	f7ff fe17 	bl	800071a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af6:	6593      	str	r3, [r2, #88]	; 0x58
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_UART_MspInit+0xb4>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b34:	2307      	movs	r3, #7
 8000b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f000 fafe 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	37b0      	adds	r7, #176	; 0xb0
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40021000 	.word	0x40021000

08000b58 <vu_init>:
 */

#include "vu_meter.h"

int vu_init(h_vu_t * h_vu, SPI_HandleTypeDef * hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	h_vu->led[VU_PORTA] = 0;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
	h_vu->led[VU_PORTB] = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	705a      	strb	r2, [r3, #1]

	h_vu->hspi = hspi;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	605a      	str	r2, [r3, #4]

	// Turn off all the LEDs in GPIOA (@0x12)
	h_vu->spi_buffer[0] = VU_HEADER_WRITE;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	721a      	strb	r2, [r3, #8]
	h_vu->spi_buffer[1] = VU_GPIOA_ADDRESS;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2212      	movs	r2, #18
 8000b7e:	725a      	strb	r2, [r3, #9]
	h_vu->spi_buffer[2] = 0xFF;	// Everything is OFF
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	4835      	ldr	r0, [pc, #212]	; (8000c60 <vu_init+0x108>)
 8000b8c:	f000 fc84 	bl	8001498 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, h_vu->spi_buffer, 3, HAL_MAX_DELAY);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f103 0108 	add.w	r1, r3, #8
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	6838      	ldr	r0, [r7, #0]
 8000b9e:	f002 f856 	bl	8002c4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	482e      	ldr	r0, [pc, #184]	; (8000c60 <vu_init+0x108>)
 8000ba8:	f000 fc76 	bl	8001498 <HAL_GPIO_WritePin>

	// Turn off all the LEDs in GPIOB (@0x13)
	h_vu->spi_buffer[0] = VU_HEADER_WRITE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	721a      	strb	r2, [r3, #8]
	h_vu->spi_buffer[1] = VU_GPIOB_ADDRESS;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2213      	movs	r2, #19
 8000bb6:	725a      	strb	r2, [r3, #9]
	h_vu->spi_buffer[2] = 0xFF;	// Everything is OFF
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4827      	ldr	r0, [pc, #156]	; (8000c60 <vu_init+0x108>)
 8000bc4:	f000 fc68 	bl	8001498 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, h_vu->spi_buffer, 3, HAL_MAX_DELAY);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f103 0108 	add.w	r1, r3, #8
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	6838      	ldr	r0, [r7, #0]
 8000bd6:	f002 f83a 	bl	8002c4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	4820      	ldr	r0, [pc, #128]	; (8000c60 <vu_init+0x108>)
 8000be0:	f000 fc5a 	bl	8001498 <HAL_GPIO_WritePin>

	// Write 0x00 in IODIRA (@0x00)
	// Controls the direction of the data I/O.
	// When a bit is set, the corresponding pin becomes an input. When a bit is clear, the corresponding pin becomes an output.
	h_vu->spi_buffer[0] = VU_HEADER_WRITE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2240      	movs	r2, #64	; 0x40
 8000be8:	721a      	strb	r2, [r3, #8]
	h_vu->spi_buffer[1] = VU_IODIRA_ADDRESS;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	725a      	strb	r2, [r3, #9]
	h_vu->spi_buffer[2] = 0x00;	// Everything is output
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <vu_init+0x108>)
 8000bfc:	f000 fc4c 	bl	8001498 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, h_vu->spi_buffer, 3, HAL_MAX_DELAY);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f103 0108 	add.w	r1, r3, #8
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	6838      	ldr	r0, [r7, #0]
 8000c0e:	f002 f81e 	bl	8002c4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <vu_init+0x108>)
 8000c18:	f000 fc3e 	bl	8001498 <HAL_GPIO_WritePin>

	// Write 0x00 in IODIRB (@0x01)
	// Controls the direction of the data I/O.
	// When a bit is set, the corresponding pin becomes an input. When a bit is clear, the corresponding pin becomes an output.
	h_vu->spi_buffer[0] = VU_HEADER_WRITE;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2240      	movs	r2, #64	; 0x40
 8000c20:	721a      	strb	r2, [r3, #8]
	h_vu->spi_buffer[1] = VU_IODIRB_ADDRESS;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2201      	movs	r2, #1
 8000c26:	725a      	strb	r2, [r3, #9]
	h_vu->spi_buffer[2] = 0x00;	// Everything is output
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <vu_init+0x108>)
 8000c34:	f000 fc30 	bl	8001498 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, h_vu->spi_buffer, 3, HAL_MAX_DELAY);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f103 0108 	add.w	r1, r3, #8
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	2203      	movs	r2, #3
 8000c44:	6838      	ldr	r0, [r7, #0]
 8000c46:	f002 f802 	bl	8002c4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <vu_init+0x108>)
 8000c50:	f000 fc22 	bl	8001498 <HAL_GPIO_WritePin>

	return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	48000400 	.word	0x48000400

08000c64 <vu_led>:

int vu_led(h_vu_t * h_vu, uint8_t port, uint8_t led, uint8_t state)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4603      	mov	r3, r0
 8000c74:	70fb      	strb	r3, [r7, #3]
 8000c76:	460b      	mov	r3, r1
 8000c78:	70bb      	strb	r3, [r7, #2]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	707b      	strb	r3, [r7, #1]
	if (state == 0)
 8000c7e:	787b      	ldrb	r3, [r7, #1]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d111      	bne.n	8000ca8 <vu_led+0x44>
	{
		h_vu->led[port] &= ~(1<<led);
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	b25a      	sxtb	r2, r3
 8000c8c:	78bb      	ldrb	r3, [r7, #2]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	b2d1      	uxtb	r1, r2
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	54d1      	strb	r1, [r2, r3]
 8000ca6:	e00e      	b.n	8000cc6 <vu_led+0x62>
	}
	else
	{
		h_vu->led[port] |= (1<<led);
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	5cd3      	ldrb	r3, [r2, r3]
 8000cae:	b25a      	sxtb	r2, r3
 8000cb0:	78bb      	ldrb	r3, [r7, #2]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	b2d1      	uxtb	r1, r2
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	54d1      	strb	r1, [r2, r3]
	}

	h_vu->spi_buffer[0] = VU_HEADER_WRITE;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2240      	movs	r2, #64	; 0x40
 8000cca:	721a      	strb	r2, [r3, #8]
	h_vu->spi_buffer[1] = VU_GPIOA_ADDRESS+port;
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	3312      	adds	r3, #18
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	725a      	strb	r2, [r3, #9]
	h_vu->spi_buffer[2] = ~(h_vu->led[port]);
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	5cd3      	ldrb	r3, [r2, r3]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	729a      	strb	r2, [r3, #10]

	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <vu_led+0xb4>)
 8000cea:	f000 fbd5 	bl	8001498 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(h_vu->hspi, h_vu->spi_buffer, 3, HAL_MAX_DELAY);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6858      	ldr	r0, [r3, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f103 0108 	add.w	r1, r3, #8
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	f001 ffa6 	bl	8002c4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <vu_led+0xb4>)
 8000d08:	f000 fbc6 	bl	8001498 <HAL_GPIO_WritePin>

	return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	48000400 	.word	0x48000400

08000d1c <vu_blink>:

	return 0;
}

int vu_blink(h_vu_t * h_vu)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	for (int j = 0 ; j < 2 ; j++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	e054      	b.n	8000dd4 <vu_blink+0xb8>
	{
		for (int i = 0 ; i < 8 ; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	e00c      	b.n	8000d4a <vu_blink+0x2e>
		{
			vu_led(h_vu, VU_PORTA, i, 1);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	2301      	movs	r3, #1
 8000d36:	2100      	movs	r1, #0
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff93 	bl	8000c64 <vu_led>
			HAL_Delay(10);
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f000 f8f6 	bl	8000f30 <HAL_Delay>
		for (int i = 0 ; i < 8 ; i++)
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	ddef      	ble.n	8000d30 <vu_blink+0x14>
		}
		for (int i = 0 ; i < 8 ; i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00c      	b.n	8000d70 <vu_blink+0x54>
		{
			vu_led(h_vu, VU_PORTB, i, 1);
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff80 	bl	8000c64 <vu_led>
			HAL_Delay(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f000 f8e3 	bl	8000f30 <HAL_Delay>
		for (int i = 0 ; i < 8 ; i++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2b07      	cmp	r3, #7
 8000d74:	ddef      	ble.n	8000d56 <vu_blink+0x3a>
		}

		HAL_Delay(50);
 8000d76:	2032      	movs	r0, #50	; 0x32
 8000d78:	f000 f8da 	bl	8000f30 <HAL_Delay>

		for (int i = 0 ; i < 8 ; i++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	e00c      	b.n	8000d9c <vu_blink+0x80>
		{
			vu_led(h_vu, VU_PORTA, i, 0);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	2300      	movs	r3, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff6a 	bl	8000c64 <vu_led>
			HAL_Delay(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f000 f8cd 	bl	8000f30 <HAL_Delay>
		for (int i = 0 ; i < 8 ; i++)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	ddef      	ble.n	8000d82 <vu_blink+0x66>
		}
		for (int i = 0 ; i < 8 ; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	e00c      	b.n	8000dc2 <vu_blink+0xa6>
		{
			vu_led(h_vu, VU_PORTB, i, 0);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	2101      	movs	r1, #1
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff57 	bl	8000c64 <vu_led>
			HAL_Delay(10);
 8000db6:	200a      	movs	r0, #10
 8000db8:	f000 f8ba 	bl	8000f30 <HAL_Delay>
		for (int i = 0 ; i < 8 ; i++)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b07      	cmp	r3, #7
 8000dc6:	ddef      	ble.n	8000da8 <vu_blink+0x8c>
		}

		HAL_Delay(50);
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f000 f8b1 	bl	8000f30 <HAL_Delay>
	for (int j = 0 ; j < 2 ; j++)
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	dda7      	ble.n	8000d2a <vu_blink+0xe>
	}

	return 0;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de8:	f7ff fe18 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopForever+0xe>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopForever+0x16>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f003 fcbf 	bl	8004794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e16:	f7ff fc05 	bl	8000624 <main>

08000e1a <LoopForever>:

LoopForever:
    b LoopForever
 8000e1a:	e7fe      	b.n	8000e1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e28:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 8000e2c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e30:	200002d4 	.word	0x200002d4

08000e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_2_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_Init+0x3c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_Init+0x3c>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f944 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 f80f 	bl	8000e78 <HAL_InitTick>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	e001      	b.n	8000e6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e66:	f7ff fd03 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_InitTick+0x6c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d023      	beq.n	8000ed4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_InitTick+0x70>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_InitTick+0x6c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f941 	bl	800112a <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10f      	bne.n	8000ece <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d809      	bhi.n	8000ec8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f919 	bl	80010f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_InitTick+0x74>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e004      	b.n	8000ed8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e001      	b.n	8000ed8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000184 	.word	0x20000184

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000184 	.word	0x20000184

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e17f      	b.n	8001454 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8171 	beq.w	800144e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d005      	beq.n	8001184 <HAL_GPIO_Init+0x40>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 0201 	and.w	r2, r3, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d118      	bne.n	8001224 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	6939      	ldr	r1, [r7, #16]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80ac 	beq.w	800144e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_GPIO_Init+0x330>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <HAL_GPIO_Init+0x330>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x330>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130e:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <HAL_GPIO_Init+0x334>)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x242>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x23e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x23a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x236>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x232>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x22e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x22a>
 800136a:	2306      	movs	r3, #6
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800136e:	2307      	movs	r3, #7
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001386:	2300      	movs	r3, #0
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_GPIO_Init+0x334>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800141e:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_GPIO_Init+0x350>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_GPIO_Init+0x350>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_GPIO_Init+0x350>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae78 	bne.w	8001154 <HAL_GPIO_Init+0x10>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48001000 	.word	0x48001000
 800148c:	48001400 	.word	0x48001400
 8001490:	48001800 	.word	0x48001800
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40007000 	.word	0x40007000

080014e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f2:	d130      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001500:	d038      	beq.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001510:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2232      	movs	r2, #50	; 0x32
 8001518:	fb02 f303 	mul.w	r3, r2, r3
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001528:	e002      	b.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3b01      	subs	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153c:	d102      	bne.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x60>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f2      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001550:	d110      	bne.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e00f      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001562:	d007      	beq.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40007000 	.word	0x40007000
 8001588:	20000000 	.word	0x20000000
 800158c:	431bde83 	.word	0x431bde83

08001590 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e3ca      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a2:	4b97      	ldr	r3, [pc, #604]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ac:	4b94      	ldr	r3, [pc, #592]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80e4 	beq.w	800178c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <HAL_RCC_OscConfig+0x4a>
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	f040 808b 	bne.w	80016e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f040 8087 	bne.w	80016e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015da:	4b89      	ldr	r3, [pc, #548]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x62>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e3a2      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1a      	ldr	r2, [r3, #32]
 80015f6:	4b82      	ldr	r3, [pc, #520]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_RCC_OscConfig+0x7c>
 8001602:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800160a:	e005      	b.n	8001618 <HAL_RCC_OscConfig+0x88>
 800160c:	4b7c      	ldr	r3, [pc, #496]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001618:	4293      	cmp	r3, r2
 800161a:	d223      	bcs.n	8001664 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fd55 	bl	80020d0 <RCC_SetFlashLatencyFromMSIRange>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e383      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001630:	4b73      	ldr	r3, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a72      	ldr	r2, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b70      	ldr	r3, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	496d      	ldr	r1, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164e:	4b6c      	ldr	r3, [pc, #432]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	4968      	ldr	r1, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
 8001662:	e025      	b.n	80016b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a65      	ldr	r2, [pc, #404]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4960      	ldr	r1, [pc, #384]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001682:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	495b      	ldr	r1, [pc, #364]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fd15 	bl	80020d0 <RCC_SetFlashLatencyFromMSIRange>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e343      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016b0:	f000 fc4a 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	4950      	ldr	r1, [pc, #320]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	4a4e      	ldr	r2, [pc, #312]	; (8001808 <HAL_RCC_OscConfig+0x278>)
 80016ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016d0:	4b4e      	ldr	r3, [pc, #312]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbcf 	bl	8000e78 <HAL_InitTick>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d052      	beq.n	800178a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	e327      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d032      	beq.n	8001756 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fc0c 	bl	8000f18 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001704:	f7ff fc08 	bl	8000f18 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e310      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a36      	ldr	r2, [pc, #216]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b34      	ldr	r3, [pc, #208]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4931      	ldr	r1, [pc, #196]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	492c      	ldr	r1, [pc, #176]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e01a      	b.n	800178c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001762:	f7ff fbd9 	bl	8000f18 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800176a:	f7ff fbd5 	bl	8000f18 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e2dd      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x1da>
 8001788:	e000      	b.n	800178c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800178a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d074      	beq.n	8001882 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x21a>
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d10e      	bne.n	80017c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d064      	beq.n	8001880 <HAL_RCC_OscConfig+0x2f0>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d160      	bne.n	8001880 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e2ba      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x24a>
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e026      	b.n	8001828 <HAL_RCC_OscConfig+0x298>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e2:	d115      	bne.n	8001810 <HAL_RCC_OscConfig+0x280>
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a02      	ldr	r2, [pc, #8]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x298>
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	08004cb8 	.word	0x08004cb8
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004
 8001810:	4ba0      	ldr	r3, [pc, #640]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a9f      	ldr	r2, [pc, #636]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b9d      	ldr	r3, [pc, #628]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a9c      	ldr	r2, [pc, #624]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fb72 	bl	8000f18 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fb6e 	bl	8000f18 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e276      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184a:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x2a8>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fb5e 	bl	8000f18 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fb5a 	bl	8000f18 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e262      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001872:	4b88      	ldr	r3, [pc, #544]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x2d0>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d060      	beq.n	8001950 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_OscConfig+0x310>
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d119      	bne.n	80018ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d116      	bne.n	80018ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a0:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x328>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e23f      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b76      	ldr	r3, [pc, #472]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	061b      	lsls	r3, r3, #24
 80018c6:	4973      	ldr	r1, [pc, #460]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	e040      	b.n	8001950 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d023      	beq.n	800191e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb19 	bl	8000f18 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ea:	f7ff fb15 	bl	8000f18 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e21d      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	495f      	ldr	r1, [pc, #380]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e018      	b.n	8001950 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a5c      	ldr	r2, [pc, #368]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff faf5 	bl	8000f18 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff faf1 	bl	8000f18 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1f9      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01c      	beq.n	800199e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff fad0 	bl	8000f18 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff facc 	bl	8000f18 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1d4      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198e:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ef      	beq.n	800197c <HAL_RCC_OscConfig+0x3ec>
 800199c:	e01b      	b.n	80019d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a4:	4a3b      	ldr	r2, [pc, #236]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff fab3 	bl	8000f18 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff faaf 	bl	8000f18 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1b7      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80019ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ef      	bne.n	80019b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a6 	beq.w	8001b30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10d      	bne.n	8001a10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d118      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fa76 	bl	8000f18 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a30:	f7ff fa72 	bl	8000f18 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e17a      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d108      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4d8>
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a66:	e029      	b.n	8001abc <HAL_RCC_OscConfig+0x52c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d115      	bne.n	8001a9c <HAL_RCC_OscConfig+0x50c>
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x52c>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	4b9c      	ldr	r3, [pc, #624]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a9b      	ldr	r2, [pc, #620]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aac:	4b98      	ldr	r3, [pc, #608]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	4a97      	ldr	r2, [pc, #604]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d016      	beq.n	8001af2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa28 	bl	8000f18 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001acc:	f7ff fa24 	bl	8000f18 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e12a      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ed      	beq.n	8001acc <HAL_RCC_OscConfig+0x53c>
 8001af0:	e015      	b.n	8001b1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7ff fa11 	bl	8000f18 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7ff fa0d 	bl	8000f18 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e113      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b10:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ed      	bne.n	8001afa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1e:	7ffb      	ldrb	r3, [r7, #31]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b7a      	ldr	r3, [pc, #488]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	4a79      	ldr	r2, [pc, #484]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80fe 	beq.w	8001d36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	f040 80d0 	bne.w	8001ce4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b44:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d130      	bne.n	8001bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	3b01      	subs	r3, #1
 8001b64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d127      	bne.n	8001bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d11f      	bne.n	8001bba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b84:	2a07      	cmp	r2, #7
 8001b86:	bf14      	ite	ne
 8001b88:	2201      	movne	r2, #1
 8001b8a:	2200      	moveq	r2, #0
 8001b8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d113      	bne.n	8001bba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d06e      	beq.n	8001c98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d069      	beq.n	8001c94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0ad      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be8:	f7ff f996 	bl	8000f18 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f992 	bl	8000f18 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e09a      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_RCC_OscConfig+0x784>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c1e:	3a01      	subs	r2, #1
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c28:	0212      	lsls	r2, r2, #8
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c30:	0852      	lsrs	r2, r2, #1
 8001c32:	3a01      	subs	r2, #1
 8001c34:	0552      	lsls	r2, r2, #21
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c3c:	0852      	lsrs	r2, r2, #1
 8001c3e:	3a01      	subs	r2, #1
 8001c40:	0652      	lsls	r2, r2, #25
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c48:	0912      	lsrs	r2, r2, #4
 8001c4a:	0452      	lsls	r2, r2, #17
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	4930      	ldr	r1, [pc, #192]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c54:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a2a      	ldr	r2, [pc, #168]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c6c:	f7ff f954 	bl	8000f18 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f950 	bl	8000f18 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e058      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c92:	e050      	b.n	8001d36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e04f      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d148      	bne.n	8001d36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a16      	ldr	r2, [pc, #88]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cbc:	f7ff f92c 	bl	8000f18 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff f928 	bl	8000f18 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e030      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x734>
 8001ce2:	e028      	b.n	8001d36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d023      	beq.n	8001d32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_RCC_OscConfig+0x780>)
 8001cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f90f 	bl	8000f18 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	e00c      	b.n	8001d18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff f90b 	bl	8000f18 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d905      	bls.n	8001d18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e013      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_OscConfig+0x7b0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ec      	bne.n	8001cfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_OscConfig+0x7b0>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4905      	ldr	r1, [pc, #20]	; (8001d40 <HAL_RCC_OscConfig+0x7b0>)
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x7b4>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
 8001d30:	e001      	b.n	8001d36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	feeefffc 	.word	0xfeeefffc

08001d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0e7      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d910      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	4970      	ldr	r1, [pc, #448]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0cf      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d908      	bls.n	8001dba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4960      	ldr	r1, [pc, #384]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04c      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d121      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0a6      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e09a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e08e      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e086      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4943      	ldr	r1, [pc, #268]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e30:	f7ff f872 	bl	8000f18 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f86e 	bl	8000f18 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e06e      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d010      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d208      	bcs.n	8001e8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	492b      	ldr	r1, [pc, #172]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d210      	bcs.n	8001ebe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 0207 	bic.w	r2, r3, #7
 8001ea4:	4923      	ldr	r1, [pc, #140]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e036      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	4918      	ldr	r1, [pc, #96]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4910      	ldr	r1, [pc, #64]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001efc:	f000 f824 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	490b      	ldr	r1, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x1f4>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1fc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe ffa9 	bl	8000e78 <HAL_InitTick>
 8001f26:	4603      	mov	r3, r0
 8001f28:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08004cb8 	.word	0x08004cb8
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b3e      	ldr	r3, [pc, #248]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x34>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11e      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e005      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e004      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d134      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d003      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fec:	e005      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff0:	617b      	str	r3, [r7, #20]
      break;
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	617b      	str	r3, [r7, #20]
      break;
 8001ff8:	e002      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	617b      	str	r3, [r7, #20]
      break;
 8001ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	3301      	adds	r3, #1
 800200c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	fb03 f202 	mul.w	r2, r3, r2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0e5b      	lsrs	r3, r3, #25
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	3301      	adds	r3, #1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002040:	69bb      	ldr	r3, [r7, #24]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	08004cd0 	.word	0x08004cd0
 8002058:	00f42400 	.word	0x00f42400
 800205c:	007a1200 	.word	0x007a1200

08002060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCC_GetHCLKFreq+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800207c:	f7ff fff0 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08004cc8 	.word	0x08004cc8

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a8:	f7ff ffda 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0adb      	lsrs	r3, r3, #11
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4904      	ldr	r1, [pc, #16]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08004cc8 	.word	0x08004cc8

080020d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020e8:	f7ff f9ee 	bl	80014c8 <HAL_PWREx_GetVoltageRange>
 80020ec:	6178      	str	r0, [r7, #20]
 80020ee:	e014      	b.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002108:	f7ff f9de 	bl	80014c8 <HAL_PWREx_GetVoltageRange>
 800210c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002120:	d10b      	bne.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d919      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2ba0      	cmp	r3, #160	; 0xa0
 800212c:	d902      	bls.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800212e:	2302      	movs	r3, #2
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e013      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002134:	2301      	movs	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	e010      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d902      	bls.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002140:	2303      	movs	r3, #3
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e00a      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d102      	bne.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800214c:	2302      	movs	r3, #2
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e004      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b70      	cmp	r3, #112	; 0x70
 8002156:	d101      	bne.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002158:	2301      	movs	r3, #1
 800215a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 0207 	bic.w	r2, r3, #7
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	40022000 	.word	0x40022000

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002198:	2300      	movs	r3, #0
 800219a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800219c:	2300      	movs	r3, #0
 800219e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d041      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b4:	d02a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ba:	d824      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c0:	d008      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c6:	d81e      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d0:	d010      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021d2:	e018      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021d4:	4b86      	ldr	r3, [pc, #536]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e0:	e015      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fabb 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80021ee:	4603      	mov	r3, r0
 80021f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f2:	e00c      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3320      	adds	r3, #32
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fba6 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002204:	e003      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	74fb      	strb	r3, [r7, #19]
      break;
 800220a:	e000      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800220c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002222:	4973      	ldr	r1, [pc, #460]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800222a:	e001      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d041      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002244:	d02a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800224a:	d824      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800224c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002250:	d008      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002256:	d81e      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d010      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002262:	e018      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a61      	ldr	r2, [pc, #388]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002270:	e015      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fa73 	bl	8002764 <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002282:	e00c      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3320      	adds	r3, #32
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fb5e 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002294:	e003      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	74fb      	strb	r3, [r7, #19]
      break;
 800229a:	e000      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800229c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022a4:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b2:	494f      	ldr	r1, [pc, #316]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ba:	e001      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a0 	beq.w	800240e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002310:	f7fe fe02 	bl	8000f18 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002316:	e009      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7fe fdfe 	bl	8000f18 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d902      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	74fb      	strb	r3, [r7, #19]
        break;
 800232a:	e005      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ef      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d15c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01f      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	d019      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fdbd 	bl	8000f18 <HAL_GetTick>
 800239e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a0:	e00b      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fdb9 	bl	8000f18 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d902      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	74fb      	strb	r3, [r7, #19]
            break;
 80023b8:	e006      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ec      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023de:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023e6:	e009      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
 80023ec:	e006      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fc:	7c7b      	ldrb	r3, [r7, #17]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a9d      	ldr	r2, [pc, #628]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241a:	4b98      	ldr	r3, [pc, #608]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f023 0203 	bic.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	4994      	ldr	r1, [pc, #592]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 020c 	bic.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	498c      	ldr	r1, [pc, #560]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800245e:	4b87      	ldr	r3, [pc, #540]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4983      	ldr	r1, [pc, #524]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002480:	4b7e      	ldr	r3, [pc, #504]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	497b      	ldr	r1, [pc, #492]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	4972      	ldr	r1, [pc, #456]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	496a      	ldr	r1, [pc, #424]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	4961      	ldr	r1, [pc, #388]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002508:	4b5c      	ldr	r3, [pc, #368]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	4959      	ldr	r1, [pc, #356]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252a:	4b54      	ldr	r3, [pc, #336]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	4950      	ldr	r1, [pc, #320]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	4948      	ldr	r1, [pc, #288]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	493f      	ldr	r1, [pc, #252]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d028      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259e:	4937      	ldr	r1, [pc, #220]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ae:	d106      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a31      	ldr	r2, [pc, #196]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ba:	60d3      	str	r3, [r2, #12]
 80025bc:	e011      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8c8 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d028      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	491f      	ldr	r1, [pc, #124]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260c:	d106      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002618:	60d3      	str	r3, [r2, #12]
 800261a:	e011      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f899 	bl	8002764 <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02b      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266a:	d109      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002676:	60d3      	str	r3, [r2, #12]
 8002678:	e014      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2101      	movs	r1, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f867 	bl	8002764 <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d02f      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026be:	4928      	ldr	r1, [pc, #160]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ce:	d10d      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f844 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d014      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
 80026ea:	e011      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3320      	adds	r3, #32
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f925 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272a:	490d      	ldr	r1, [pc, #52]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274e:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002756:	7cbb      	ldrb	r3, [r7, #18]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000

08002764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002772:	4b75      	ldr	r3, [pc, #468]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d018      	beq.n	80027b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0203 	and.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d10d      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
       ||
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002796:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
       ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d047      	beq.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	e044      	b.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d018      	beq.n	80027ea <RCCEx_PLLSAI1_Config+0x86>
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d825      	bhi.n	8002808 <RCCEx_PLLSAI1_Config+0xa4>
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d002      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x62>
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d009      	beq.n	80027d8 <RCCEx_PLLSAI1_Config+0x74>
 80027c4:	e020      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027c6:	4b60      	ldr	r3, [pc, #384]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11d      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d6:	e01a      	b.n	800280e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d8:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e8:	e013      	b.n	8002812 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ea:	4b57      	ldr	r3, [pc, #348]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002806:	e006      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e004      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002816:	bf00      	nop
    }

    if(status == HAL_OK)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	430b      	orrs	r3, r1
 8002834:	4944      	ldr	r1, [pc, #272]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d17d      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a40      	ldr	r2, [pc, #256]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800284a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284c:	f7fe fb64 	bl	8000f18 <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002852:	e009      	b.n	8002868 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002854:	f7fe fb60 	bl	8000f18 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	73fb      	strb	r3, [r7, #15]
        break;
 8002866:	e005      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ef      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d160      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6892      	ldr	r2, [r2, #8]
 8002890:	0211      	lsls	r1, r2, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68d2      	ldr	r2, [r2, #12]
 8002896:	0912      	lsrs	r2, r2, #4
 8002898:	0452      	lsls	r2, r2, #17
 800289a:	430a      	orrs	r2, r1
 800289c:	492a      	ldr	r1, [pc, #168]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	610b      	str	r3, [r1, #16]
 80028a2:	e027      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d112      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	0211      	lsls	r1, r2, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6912      	ldr	r2, [r2, #16]
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0552      	lsls	r2, r2, #21
 80028c6:	430a      	orrs	r2, r1
 80028c8:	491f      	ldr	r1, [pc, #124]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
 80028ce:	e011      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	0211      	lsls	r1, r2, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6952      	ldr	r2, [r2, #20]
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0652      	lsls	r2, r2, #25
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4916      	ldr	r1, [pc, #88]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fb0a 	bl	8000f18 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002906:	e009      	b.n	800291c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002908:	f7fe fb06 	bl	8000f18 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d902      	bls.n	800291c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	73fb      	strb	r3, [r7, #15]
          break;
 800291a:	e005      	b.n	8002928 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	4904      	ldr	r1, [pc, #16]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295a:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002966:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d10d      	bne.n	8002992 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
       ||
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
       ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d047      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e044      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d018      	beq.n	80029d2 <RCCEx_PLLSAI2_Config+0x86>
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d825      	bhi.n	80029f0 <RCCEx_PLLSAI2_Config+0xa4>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d002      	beq.n	80029ae <RCCEx_PLLSAI2_Config+0x62>
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d009      	beq.n	80029c0 <RCCEx_PLLSAI2_Config+0x74>
 80029ac:	e020      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ae:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029be:	e01a      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e013      	b.n	80029fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ee:	e006      	b.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      break;
 80029f4:	e004      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d167      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe fa70 	bl	8000f18 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a3a:	e009      	b.n	8002a50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a3c:	f7fe fa6c 	bl	8000f18 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d902      	bls.n	8002a50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a4e:	e005      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ef      	bne.n	8002a3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d14a      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	0211      	lsls	r1, r2, #8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	0912      	lsrs	r2, r2, #4
 8002a80:	0452      	lsls	r2, r2, #17
 8002a82:	430a      	orrs	r2, r1
 8002a84:	491f      	ldr	r1, [pc, #124]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	614b      	str	r3, [r1, #20]
 8002a8a:	e011      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	0211      	lsls	r1, r2, #8
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6912      	ldr	r2, [r2, #16]
 8002aa2:	0852      	lsrs	r2, r2, #1
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	0652      	lsls	r2, r2, #25
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	4916      	ldr	r1, [pc, #88]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fa2c 	bl	8000f18 <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ac2:	e009      	b.n	8002ad8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ac4:	f7fe fa28 	bl	8000f18 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ad6:	e005      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4904      	ldr	r1, [pc, #16]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e095      	b.n	8002c46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2a:	d009      	beq.n	8002b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
 8002b32:	e005      	b.n	8002b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fd fe26 	bl	80007ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b80:	d902      	bls.n	8002b88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e002      	b.n	8002b8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b96:	d007      	beq.n	8002ba8 <HAL_SPI_Init+0xa0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ba0:	d002      	beq.n	8002ba8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	ea42 0103 	orr.w	r1, r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	0c1b      	lsrs	r3, r3, #16
 8002c04:	f003 0204 	and.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c24:	ea42 0103 	orr.w	r1, r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_SPI_Transmit+0x22>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e15f      	b.n	8002f30 <HAL_SPI_Transmit+0x2e2>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c78:	f7fe f94e 	bl	8000f18 <HAL_GetTick>
 8002c7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d002      	beq.n	8002c94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c92:	e148      	b.n	8002f26 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0x52>
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ca4:	e13f      	b.n	8002f26 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf0:	d10f      	bne.n	8002d12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d007      	beq.n	8002d30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d38:	d94f      	bls.n	8002dda <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_Transmit+0xfa>
 8002d42:	8afb      	ldrh	r3, [r7, #22]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d142      	bne.n	8002dce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d6c:	e02f      	b.n	8002dce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d112      	bne.n	8002da2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	1c9a      	adds	r2, r3, #2
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002da0:	e015      	b.n	8002dce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da2:	f7fe f8b9 	bl	8000f18 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d803      	bhi.n	8002dba <HAL_SPI_Transmit+0x16c>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d102      	bne.n	8002dc0 <HAL_SPI_Transmit+0x172>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002dcc:	e0ab      	b.n	8002f26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ca      	bne.n	8002d6e <HAL_SPI_Transmit+0x120>
 8002dd8:	e080      	b.n	8002edc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_Transmit+0x19a>
 8002de2:	8afb      	ldrh	r3, [r7, #22]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d174      	bne.n	8002ed2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d912      	bls.n	8002e18 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	1c9a      	adds	r2, r3, #2
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b02      	subs	r3, #2
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e16:	e05c      	b.n	8002ed2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	7812      	ldrb	r2, [r2, #0]
 8002e24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e3e:	e048      	b.n	8002ed2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d12b      	bne.n	8002ea6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d912      	bls.n	8002e7e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b02      	subs	r3, #2
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e7c:	e029      	b.n	8002ed2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ea4:	e015      	b.n	8002ed2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea6:	f7fe f837 	bl	8000f18 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d803      	bhi.n	8002ebe <HAL_SPI_Transmit+0x270>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d102      	bne.n	8002ec4 <HAL_SPI_Transmit+0x276>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002ed0:	e029      	b.n	8002f26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1b1      	bne.n	8002e40 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f947 	bl	8003174 <SPI_EndRxTxTransaction>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e003      	b.n	8002f26 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f48:	f7fd ffe6 	bl	8000f18 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f58:	f7fd ffde 	bl	8000f18 <HAL_GetTick>
 8002f5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f5e:	4b39      	ldr	r3, [pc, #228]	; (8003044 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	015b      	lsls	r3, r3, #5
 8002f64:	0d1b      	lsrs	r3, r3, #20
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f6e:	e054      	b.n	800301a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d050      	beq.n	800301a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f78:	f7fd ffce 	bl	8000f18 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d902      	bls.n	8002f8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d13d      	bne.n	800300a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa6:	d111      	bne.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb0:	d004      	beq.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d107      	bne.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd4:	d10f      	bne.n	8002ff6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e017      	b.n	800303a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3b01      	subs	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d19b      	bne.n	8002f70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000000 	.word	0x20000000

08003048 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800305a:	f7fd ff5d 	bl	8000f18 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	4413      	add	r3, r2
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800306a:	f7fd ff55 	bl	8000f18 <HAL_GetTick>
 800306e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003078:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00da      	lsls	r2, r3, #3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	0d1b      	lsrs	r3, r3, #20
 8003088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003090:	e060      	b.n	8003154 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003098:	d107      	bne.n	80030aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d050      	beq.n	8003154 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030b2:	f7fd ff31 	bl	8000f18 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	429a      	cmp	r2, r3
 80030c0:	d902      	bls.n	80030c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d13d      	bne.n	8003144 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e0:	d111      	bne.n	8003106 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ea:	d004      	beq.n	80030f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f4:	d107      	bne.n	8003106 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003104:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310e:	d10f      	bne.n	8003130 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e010      	b.n	8003166 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	3b01      	subs	r3, #1
 8003152:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d196      	bne.n	8003092 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000

08003174 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2200      	movs	r2, #0
 8003188:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff ff5b 	bl	8003048 <SPI_WaitFifoStateUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e027      	b.n	80031f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fec0 	bl	8002f38 <SPI_WaitFlagStateUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e014      	b.n	80031f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff34 	bl	8003048 <SPI_WaitFifoStateUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e000      	b.n	80031f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e040      	b.n	8003294 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd fc3c 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2224      	movs	r2, #36	; 0x24
 800322c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fbc2 	bl	80039d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f907 	bl	8003460 <UART_SetConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e01b      	b.n	8003294 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800326a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800327a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fc41 	bl	8003b14 <UART_CheckIdleState>
 8003292:	4603      	mov	r3, r0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d178      	bne.n	80033a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_UART_Transmit+0x24>
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e071      	b.n	80033a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2221      	movs	r2, #33	; 0x21
 80032d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d2:	f7fd fe21 	bl	8000f18 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f0:	d108      	bne.n	8003304 <HAL_UART_Transmit+0x68>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e003      	b.n	800330c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800330c:	e030      	b.n	8003370 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fca3 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e03c      	b.n	80033a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003340:	b292      	uxth	r2, r2
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	3302      	adds	r3, #2
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	e008      	b.n	800335e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b292      	uxth	r2, r2
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1c8      	bne.n	800330e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fc6c 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e005      	b.n	80033a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d137      	bne.n	8003438 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_UART_Receive_IT+0x24>
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e030      	b.n	800343a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_UART_Receive_IT+0x94>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d01f      	beq.n	8003428 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	613b      	str	r3, [r7, #16]
   return(result);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	69f9      	ldr	r1, [r7, #28]
 800341a:	6a3a      	ldr	r2, [r7, #32]
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	61bb      	str	r3, [r7, #24]
   return(result);
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e6      	bne.n	80033f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	461a      	mov	r2, r3
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fc80 	bl	8003d34 <UART_Start_Receive_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	e000      	b.n	800343a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3728      	adds	r7, #40	; 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40008000 	.word	0x40008000

08003448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b08a      	sub	sp, #40	; 0x28
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	431a      	orrs	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4313      	orrs	r3, r2
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4ba4      	ldr	r3, [pc, #656]	; (8003720 <UART_SetConfig+0x2c0>)
 8003490:	4013      	ands	r3, r2
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003498:	430b      	orrs	r3, r1
 800349a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a99      	ldr	r2, [pc, #612]	; (8003724 <UART_SetConfig+0x2c4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	4313      	orrs	r3, r2
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a90      	ldr	r2, [pc, #576]	; (8003728 <UART_SetConfig+0x2c8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d126      	bne.n	8003538 <UART_SetConfig+0xd8>
 80034ea:	4b90      	ldr	r3, [pc, #576]	; (800372c <UART_SetConfig+0x2cc>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d81b      	bhi.n	8003530 <UART_SetConfig+0xd0>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0xa0>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003511 	.word	0x08003511
 8003504:	08003521 	.word	0x08003521
 8003508:	08003519 	.word	0x08003519
 800350c:	08003529 	.word	0x08003529
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e116      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003518:	2302      	movs	r3, #2
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351e:	e112      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003520:	2304      	movs	r3, #4
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003526:	e10e      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003528:	2308      	movs	r3, #8
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352e:	e10a      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003530:	2310      	movs	r3, #16
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003536:	e106      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a7c      	ldr	r2, [pc, #496]	; (8003730 <UART_SetConfig+0x2d0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d138      	bne.n	80035b4 <UART_SetConfig+0x154>
 8003542:	4b7a      	ldr	r3, [pc, #488]	; (800372c <UART_SetConfig+0x2cc>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b0c      	cmp	r3, #12
 800354e:	d82d      	bhi.n	80035ac <UART_SetConfig+0x14c>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <UART_SetConfig+0xf8>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800358d 	.word	0x0800358d
 800355c:	080035ad 	.word	0x080035ad
 8003560:	080035ad 	.word	0x080035ad
 8003564:	080035ad 	.word	0x080035ad
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035ad 	.word	0x080035ad
 8003570:	080035ad 	.word	0x080035ad
 8003574:	080035ad 	.word	0x080035ad
 8003578:	08003595 	.word	0x08003595
 800357c:	080035ad 	.word	0x080035ad
 8003580:	080035ad 	.word	0x080035ad
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035a5 	.word	0x080035a5
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e0d8      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003594:	2302      	movs	r3, #2
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e0d4      	b.n	8003746 <UART_SetConfig+0x2e6>
 800359c:	2304      	movs	r3, #4
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e0d0      	b.n	8003746 <UART_SetConfig+0x2e6>
 80035a4:	2308      	movs	r3, #8
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e0cc      	b.n	8003746 <UART_SetConfig+0x2e6>
 80035ac:	2310      	movs	r3, #16
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e0c8      	b.n	8003746 <UART_SetConfig+0x2e6>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5e      	ldr	r2, [pc, #376]	; (8003734 <UART_SetConfig+0x2d4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d125      	bne.n	800360a <UART_SetConfig+0x1aa>
 80035be:	4b5b      	ldr	r3, [pc, #364]	; (800372c <UART_SetConfig+0x2cc>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035c8:	2b30      	cmp	r3, #48	; 0x30
 80035ca:	d016      	beq.n	80035fa <UART_SetConfig+0x19a>
 80035cc:	2b30      	cmp	r3, #48	; 0x30
 80035ce:	d818      	bhi.n	8003602 <UART_SetConfig+0x1a2>
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d00a      	beq.n	80035ea <UART_SetConfig+0x18a>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d814      	bhi.n	8003602 <UART_SetConfig+0x1a2>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <UART_SetConfig+0x182>
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d008      	beq.n	80035f2 <UART_SetConfig+0x192>
 80035e0:	e00f      	b.n	8003602 <UART_SetConfig+0x1a2>
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e8:	e0ad      	b.n	8003746 <UART_SetConfig+0x2e6>
 80035ea:	2302      	movs	r3, #2
 80035ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f0:	e0a9      	b.n	8003746 <UART_SetConfig+0x2e6>
 80035f2:	2304      	movs	r3, #4
 80035f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f8:	e0a5      	b.n	8003746 <UART_SetConfig+0x2e6>
 80035fa:	2308      	movs	r3, #8
 80035fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003600:	e0a1      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003602:	2310      	movs	r3, #16
 8003604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003608:	e09d      	b.n	8003746 <UART_SetConfig+0x2e6>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a4a      	ldr	r2, [pc, #296]	; (8003738 <UART_SetConfig+0x2d8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d125      	bne.n	8003660 <UART_SetConfig+0x200>
 8003614:	4b45      	ldr	r3, [pc, #276]	; (800372c <UART_SetConfig+0x2cc>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800361e:	2bc0      	cmp	r3, #192	; 0xc0
 8003620:	d016      	beq.n	8003650 <UART_SetConfig+0x1f0>
 8003622:	2bc0      	cmp	r3, #192	; 0xc0
 8003624:	d818      	bhi.n	8003658 <UART_SetConfig+0x1f8>
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d00a      	beq.n	8003640 <UART_SetConfig+0x1e0>
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d814      	bhi.n	8003658 <UART_SetConfig+0x1f8>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <UART_SetConfig+0x1d8>
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d008      	beq.n	8003648 <UART_SetConfig+0x1e8>
 8003636:	e00f      	b.n	8003658 <UART_SetConfig+0x1f8>
 8003638:	2300      	movs	r3, #0
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363e:	e082      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003640:	2302      	movs	r3, #2
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003646:	e07e      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003648:	2304      	movs	r3, #4
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364e:	e07a      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003650:	2308      	movs	r3, #8
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003656:	e076      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003658:	2310      	movs	r3, #16
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365e:	e072      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a35      	ldr	r2, [pc, #212]	; (800373c <UART_SetConfig+0x2dc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d12a      	bne.n	80036c0 <UART_SetConfig+0x260>
 800366a:	4b30      	ldr	r3, [pc, #192]	; (800372c <UART_SetConfig+0x2cc>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003678:	d01a      	beq.n	80036b0 <UART_SetConfig+0x250>
 800367a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367e:	d81b      	bhi.n	80036b8 <UART_SetConfig+0x258>
 8003680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003684:	d00c      	beq.n	80036a0 <UART_SetConfig+0x240>
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d815      	bhi.n	80036b8 <UART_SetConfig+0x258>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <UART_SetConfig+0x238>
 8003690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003694:	d008      	beq.n	80036a8 <UART_SetConfig+0x248>
 8003696:	e00f      	b.n	80036b8 <UART_SetConfig+0x258>
 8003698:	2300      	movs	r3, #0
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e052      	b.n	8003746 <UART_SetConfig+0x2e6>
 80036a0:	2302      	movs	r3, #2
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e04e      	b.n	8003746 <UART_SetConfig+0x2e6>
 80036a8:	2304      	movs	r3, #4
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ae:	e04a      	b.n	8003746 <UART_SetConfig+0x2e6>
 80036b0:	2308      	movs	r3, #8
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b6:	e046      	b.n	8003746 <UART_SetConfig+0x2e6>
 80036b8:	2310      	movs	r3, #16
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036be:	e042      	b.n	8003746 <UART_SetConfig+0x2e6>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a17      	ldr	r2, [pc, #92]	; (8003724 <UART_SetConfig+0x2c4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d13a      	bne.n	8003740 <UART_SetConfig+0x2e0>
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <UART_SetConfig+0x2cc>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d8:	d01a      	beq.n	8003710 <UART_SetConfig+0x2b0>
 80036da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036de:	d81b      	bhi.n	8003718 <UART_SetConfig+0x2b8>
 80036e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e4:	d00c      	beq.n	8003700 <UART_SetConfig+0x2a0>
 80036e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ea:	d815      	bhi.n	8003718 <UART_SetConfig+0x2b8>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <UART_SetConfig+0x298>
 80036f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f4:	d008      	beq.n	8003708 <UART_SetConfig+0x2a8>
 80036f6:	e00f      	b.n	8003718 <UART_SetConfig+0x2b8>
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e022      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003700:	2302      	movs	r3, #2
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e01e      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003708:	2304      	movs	r3, #4
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e01a      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003710:	2308      	movs	r3, #8
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e016      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003718:	2310      	movs	r3, #16
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e012      	b.n	8003746 <UART_SetConfig+0x2e6>
 8003720:	efff69f3 	.word	0xefff69f3
 8003724:	40008000 	.word	0x40008000
 8003728:	40013800 	.word	0x40013800
 800372c:	40021000 	.word	0x40021000
 8003730:	40004400 	.word	0x40004400
 8003734:	40004800 	.word	0x40004800
 8003738:	40004c00 	.word	0x40004c00
 800373c:	40005000 	.word	0x40005000
 8003740:	2310      	movs	r3, #16
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a9f      	ldr	r2, [pc, #636]	; (80039c8 <UART_SetConfig+0x568>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d17a      	bne.n	8003846 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003754:	2b08      	cmp	r3, #8
 8003756:	d824      	bhi.n	80037a2 <UART_SetConfig+0x342>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0x300>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003785 	.word	0x08003785
 8003764:	080037a3 	.word	0x080037a3
 8003768:	0800378d 	.word	0x0800378d
 800376c:	080037a3 	.word	0x080037a3
 8003770:	08003793 	.word	0x08003793
 8003774:	080037a3 	.word	0x080037a3
 8003778:	080037a3 	.word	0x080037a3
 800377c:	080037a3 	.word	0x080037a3
 8003780:	0800379b 	.word	0x0800379b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7fe fc78 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003788:	61f8      	str	r0, [r7, #28]
        break;
 800378a:	e010      	b.n	80037ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800378c:	4b8f      	ldr	r3, [pc, #572]	; (80039cc <UART_SetConfig+0x56c>)
 800378e:	61fb      	str	r3, [r7, #28]
        break;
 8003790:	e00d      	b.n	80037ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003792:	f7fe fbd9 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8003796:	61f8      	str	r0, [r7, #28]
        break;
 8003798:	e009      	b.n	80037ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379e:	61fb      	str	r3, [r7, #28]
        break;
 80037a0:	e005      	b.n	80037ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80fb 	beq.w	80039ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d305      	bcc.n	80037d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d903      	bls.n	80037da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037d8:	e0e8      	b.n	80039ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2200      	movs	r2, #0
 80037de:	461c      	mov	r4, r3
 80037e0:	4615      	mov	r5, r2
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	022b      	lsls	r3, r5, #8
 80037ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037f0:	0222      	lsls	r2, r4, #8
 80037f2:	68f9      	ldr	r1, [r7, #12]
 80037f4:	6849      	ldr	r1, [r1, #4]
 80037f6:	0849      	lsrs	r1, r1, #1
 80037f8:	2000      	movs	r0, #0
 80037fa:	4688      	mov	r8, r1
 80037fc:	4681      	mov	r9, r0
 80037fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003802:	eb43 0b09 	adc.w	fp, r3, r9
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003814:	4650      	mov	r0, sl
 8003816:	4659      	mov	r1, fp
 8003818:	f7fc fcd6 	bl	80001c8 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4613      	mov	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800382a:	d308      	bcc.n	800383e <UART_SetConfig+0x3de>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003832:	d204      	bcs.n	800383e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	60da      	str	r2, [r3, #12]
 800383c:	e0b6      	b.n	80039ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003844:	e0b2      	b.n	80039ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384e:	d15e      	bne.n	800390e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003854:	2b08      	cmp	r3, #8
 8003856:	d828      	bhi.n	80038aa <UART_SetConfig+0x44a>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x400>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003885 	.word	0x08003885
 8003864:	0800388d 	.word	0x0800388d
 8003868:	08003895 	.word	0x08003895
 800386c:	080038ab 	.word	0x080038ab
 8003870:	0800389b 	.word	0x0800389b
 8003874:	080038ab 	.word	0x080038ab
 8003878:	080038ab 	.word	0x080038ab
 800387c:	080038ab 	.word	0x080038ab
 8003880:	080038a3 	.word	0x080038a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7fe fbf8 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003888:	61f8      	str	r0, [r7, #28]
        break;
 800388a:	e014      	b.n	80038b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800388c:	f7fe fc0a 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003890:	61f8      	str	r0, [r7, #28]
        break;
 8003892:	e010      	b.n	80038b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003894:	4b4d      	ldr	r3, [pc, #308]	; (80039cc <UART_SetConfig+0x56c>)
 8003896:	61fb      	str	r3, [r7, #28]
        break;
 8003898:	e00d      	b.n	80038b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389a:	f7fe fb55 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 800389e:	61f8      	str	r0, [r7, #28]
        break;
 80038a0:	e009      	b.n	80038b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a6:	61fb      	str	r3, [r7, #28]
        break;
 80038a8:	e005      	b.n	80038b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d077      	beq.n	80039ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005a      	lsls	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	441a      	add	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d916      	bls.n	8003906 <UART_SetConfig+0x4a6>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038de:	d212      	bcs.n	8003906 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f023 030f 	bic.w	r3, r3, #15
 80038e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	8afb      	ldrh	r3, [r7, #22]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	8afa      	ldrh	r2, [r7, #22]
 8003902:	60da      	str	r2, [r3, #12]
 8003904:	e052      	b.n	80039ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800390c:	e04e      	b.n	80039ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800390e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003912:	2b08      	cmp	r3, #8
 8003914:	d827      	bhi.n	8003966 <UART_SetConfig+0x506>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <UART_SetConfig+0x4bc>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	08003941 	.word	0x08003941
 8003920:	08003949 	.word	0x08003949
 8003924:	08003951 	.word	0x08003951
 8003928:	08003967 	.word	0x08003967
 800392c:	08003957 	.word	0x08003957
 8003930:	08003967 	.word	0x08003967
 8003934:	08003967 	.word	0x08003967
 8003938:	08003967 	.word	0x08003967
 800393c:	0800395f 	.word	0x0800395f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003940:	f7fe fb9a 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003944:	61f8      	str	r0, [r7, #28]
        break;
 8003946:	e014      	b.n	8003972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003948:	f7fe fbac 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 800394c:	61f8      	str	r0, [r7, #28]
        break;
 800394e:	e010      	b.n	8003972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003950:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <UART_SetConfig+0x56c>)
 8003952:	61fb      	str	r3, [r7, #28]
        break;
 8003954:	e00d      	b.n	8003972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003956:	f7fe faf7 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 800395a:	61f8      	str	r0, [r7, #28]
        break;
 800395c:	e009      	b.n	8003972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003962:	61fb      	str	r3, [r7, #28]
        break;
 8003964:	e005      	b.n	8003972 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003970:	bf00      	nop
    }

    if (pclk != 0U)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d019      	beq.n	80039ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	085a      	lsrs	r2, r3, #1
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	441a      	add	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d909      	bls.n	80039a6 <UART_SetConfig+0x546>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003998:	d205      	bcs.n	80039a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e002      	b.n	80039ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	40008000 	.word	0x40008000
 80039cc:	00f42400 	.word	0x00f42400

080039d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ace:	d10a      	bne.n	8003ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b098      	sub	sp, #96	; 0x60
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b24:	f7fd f9f8 	bl	8000f18 <HAL_GetTick>
 8003b28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d12e      	bne.n	8003b96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f88c 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d021      	beq.n	8003b96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b66:	653b      	str	r3, [r7, #80]	; 0x50
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
 8003b72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e6      	bne.n	8003b52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e062      	b.n	8003c5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d149      	bne.n	8003c38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f856 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03c      	beq.n	8003c38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	623b      	str	r3, [r7, #32]
   return(result);
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bde:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e6      	bne.n	8003bbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c10:	61fa      	str	r2, [r7, #28]
 8003c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e011      	b.n	8003c5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3758      	adds	r7, #88	; 0x58
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c74:	e049      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d045      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fd f94b 	bl	8000f18 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e048      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d031      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d110      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f8ff 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e029      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce4:	d111      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f8e5 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e00f      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d0a6      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b097      	sub	sp, #92	; 0x5c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d10e      	bne.n	8003d86 <UART_Start_Receive_IT+0x52>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <UART_Start_Receive_IT+0x48>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d7a:	e02d      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	22ff      	movs	r2, #255	; 0xff
 8003d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d84:	e028      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <UART_Start_Receive_IT+0x76>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <UART_Start_Receive_IT+0x6c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	22ff      	movs	r2, #255	; 0xff
 8003d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d9e:	e01b      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	227f      	movs	r2, #127	; 0x7f
 8003da4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003da8:	e016      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db2:	d10d      	bne.n	8003dd0 <UART_Start_Receive_IT+0x9c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <UART_Start_Receive_IT+0x92>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	227f      	movs	r2, #127	; 0x7f
 8003dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dc4:	e008      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	223f      	movs	r2, #63	; 0x3f
 8003dca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dce:	e003      	b.n	8003dd8 <UART_Start_Receive_IT+0xa4>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2222      	movs	r2, #34	; 0x22
 8003de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e08:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e24:	d107      	bne.n	8003e36 <UART_Start_Receive_IT+0x102>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <UART_Start_Receive_IT+0x184>)
 8003e32:	669a      	str	r2, [r3, #104]	; 0x68
 8003e34:	e002      	b.n	8003e3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <UART_Start_Receive_IT+0x188>)
 8003e3a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d019      	beq.n	8003e78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
 8003e64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e6      	bne.n	8003e44 <UART_Start_Receive_IT+0x110>
 8003e76:	e018      	b.n	8003eaa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69f9      	ldr	r1, [r7, #28]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	375c      	adds	r7, #92	; 0x5c
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	08004145 	.word	0x08004145
 8003ebc:	08003f89 	.word	0x08003f89

08003ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b095      	sub	sp, #84	; 0x54
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d118      	bne.n	8003f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f7c:	bf00      	nop
 8003f7e:	3754      	adds	r7, #84	; 0x54
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b09c      	sub	sp, #112	; 0x70
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa0:	2b22      	cmp	r3, #34	; 0x22
 8003fa2:	f040 80be 	bne.w	8004122 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003fb4:	b2d9      	uxtb	r1, r3
 8003fb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 80a3 	bne.w	8004136 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004004:	66bb      	str	r3, [r7, #104]	; 0x68
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004010:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800401c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	667b      	str	r3, [r7, #100]	; 0x64
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004042:	647a      	str	r2, [r7, #68]	; 0x44
 8004044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a34      	ldr	r2, [pc, #208]	; (8004140 <UART_RxISR_8BIT+0x1b8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d01f      	beq.n	80040b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d018      	beq.n	80040b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	623b      	str	r3, [r7, #32]
   return(result);
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004096:	663b      	str	r3, [r7, #96]	; 0x60
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
 80040a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d12e      	bne.n	800411a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0310 	bic.w	r3, r3, #16
 80040d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	617b      	str	r3, [r7, #20]
   return(result);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d103      	bne.n	800410a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2210      	movs	r2, #16
 8004108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004110:	4619      	mov	r1, r3
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff f998 	bl	8003448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004118:	e00d      	b.n	8004136 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fa6a 	bl	80005f4 <HAL_UART_RxCpltCallback>
}
 8004120:	e009      	b.n	8004136 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	8b1b      	ldrh	r3, [r3, #24]
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0208 	orr.w	r2, r2, #8
 8004132:	b292      	uxth	r2, r2
 8004134:	831a      	strh	r2, [r3, #24]
}
 8004136:	bf00      	nop
 8004138:	3770      	adds	r7, #112	; 0x70
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40008000 	.word	0x40008000

08004144 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b09c      	sub	sp, #112	; 0x70
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004152:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415c:	2b22      	cmp	r3, #34	; 0x22
 800415e:	f040 80be 	bne.w	80042de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004168:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004172:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004176:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800417a:	4013      	ands	r3, r2
 800417c:	b29a      	uxth	r2, r3
 800417e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004180:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 80a3 	bne.w	80042f2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80041ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041c0:	667b      	str	r3, [r7, #100]	; 0x64
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ca:	657b      	str	r3, [r7, #84]	; 0x54
 80041cc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e6      	bne.n	80041ac <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fe:	643a      	str	r2, [r7, #64]	; 0x40
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a34      	ldr	r2, [pc, #208]	; (80042fc <UART_RxISR_16BIT+0x1b8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d01f      	beq.n	8004270 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	61fb      	str	r3, [r7, #28]
   return(result);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	2b01      	cmp	r3, #1
 8004276:	d12e      	bne.n	80042d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	60bb      	str	r3, [r7, #8]
   return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f023 0310 	bic.w	r3, r3, #16
 8004292:	65bb      	str	r3, [r7, #88]	; 0x58
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e6      	bne.n	800427e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d103      	bne.n	80042c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2210      	movs	r2, #16
 80042c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff f8ba 	bl	8003448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042d4:	e00d      	b.n	80042f2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc f98c 	bl	80005f4 <HAL_UART_RxCpltCallback>
}
 80042dc:	e009      	b.n	80042f2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	8b1b      	ldrh	r3, [r3, #24]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0208 	orr.w	r2, r2, #8
 80042ee:	b292      	uxth	r2, r2
 80042f0:	831a      	strh	r2, [r3, #24]
}
 80042f2:	bf00      	nop
 80042f4:	3770      	adds	r7, #112	; 0x70
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40008000 	.word	0x40008000

08004300 <std>:
 8004300:	2300      	movs	r3, #0
 8004302:	b510      	push	{r4, lr}
 8004304:	4604      	mov	r4, r0
 8004306:	e9c0 3300 	strd	r3, r3, [r0]
 800430a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800430e:	6083      	str	r3, [r0, #8]
 8004310:	8181      	strh	r1, [r0, #12]
 8004312:	6643      	str	r3, [r0, #100]	; 0x64
 8004314:	81c2      	strh	r2, [r0, #14]
 8004316:	6183      	str	r3, [r0, #24]
 8004318:	4619      	mov	r1, r3
 800431a:	2208      	movs	r2, #8
 800431c:	305c      	adds	r0, #92	; 0x5c
 800431e:	f000 f9e5 	bl	80046ec <memset>
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <std+0x58>)
 8004324:	6263      	str	r3, [r4, #36]	; 0x24
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <std+0x5c>)
 8004328:	62a3      	str	r3, [r4, #40]	; 0x28
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <std+0x60>)
 800432c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <std+0x64>)
 8004330:	6323      	str	r3, [r4, #48]	; 0x30
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <std+0x68>)
 8004334:	6224      	str	r4, [r4, #32]
 8004336:	429c      	cmp	r4, r3
 8004338:	d006      	beq.n	8004348 <std+0x48>
 800433a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800433e:	4294      	cmp	r4, r2
 8004340:	d002      	beq.n	8004348 <std+0x48>
 8004342:	33d0      	adds	r3, #208	; 0xd0
 8004344:	429c      	cmp	r4, r3
 8004346:	d105      	bne.n	8004354 <std+0x54>
 8004348:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004350:	f000 ba44 	b.w	80047dc <__retarget_lock_init_recursive>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	bf00      	nop
 8004358:	0800453d 	.word	0x0800453d
 800435c:	0800455f 	.word	0x0800455f
 8004360:	08004597 	.word	0x08004597
 8004364:	080045bb 	.word	0x080045bb
 8004368:	20000188 	.word	0x20000188

0800436c <stdio_exit_handler>:
 800436c:	4a02      	ldr	r2, [pc, #8]	; (8004378 <stdio_exit_handler+0xc>)
 800436e:	4903      	ldr	r1, [pc, #12]	; (800437c <stdio_exit_handler+0x10>)
 8004370:	4803      	ldr	r0, [pc, #12]	; (8004380 <stdio_exit_handler+0x14>)
 8004372:	f000 b869 	b.w	8004448 <_fwalk_sglue>
 8004376:	bf00      	nop
 8004378:	2000000c 	.word	0x2000000c
 800437c:	08004ae1 	.word	0x08004ae1
 8004380:	20000018 	.word	0x20000018

08004384 <cleanup_stdio>:
 8004384:	6841      	ldr	r1, [r0, #4]
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <cleanup_stdio+0x34>)
 8004388:	4299      	cmp	r1, r3
 800438a:	b510      	push	{r4, lr}
 800438c:	4604      	mov	r4, r0
 800438e:	d001      	beq.n	8004394 <cleanup_stdio+0x10>
 8004390:	f000 fba6 	bl	8004ae0 <_fflush_r>
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <cleanup_stdio+0x38>)
 8004398:	4299      	cmp	r1, r3
 800439a:	d002      	beq.n	80043a2 <cleanup_stdio+0x1e>
 800439c:	4620      	mov	r0, r4
 800439e:	f000 fb9f 	bl	8004ae0 <_fflush_r>
 80043a2:	68e1      	ldr	r1, [r4, #12]
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <cleanup_stdio+0x3c>)
 80043a6:	4299      	cmp	r1, r3
 80043a8:	d004      	beq.n	80043b4 <cleanup_stdio+0x30>
 80043aa:	4620      	mov	r0, r4
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b0:	f000 bb96 	b.w	8004ae0 <_fflush_r>
 80043b4:	bd10      	pop	{r4, pc}
 80043b6:	bf00      	nop
 80043b8:	20000188 	.word	0x20000188
 80043bc:	200001f0 	.word	0x200001f0
 80043c0:	20000258 	.word	0x20000258

080043c4 <global_stdio_init.part.0>:
 80043c4:	b510      	push	{r4, lr}
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <global_stdio_init.part.0+0x30>)
 80043c8:	4c0b      	ldr	r4, [pc, #44]	; (80043f8 <global_stdio_init.part.0+0x34>)
 80043ca:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <global_stdio_init.part.0+0x38>)
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4620      	mov	r0, r4
 80043d0:	2200      	movs	r2, #0
 80043d2:	2104      	movs	r1, #4
 80043d4:	f7ff ff94 	bl	8004300 <std>
 80043d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80043dc:	2201      	movs	r2, #1
 80043de:	2109      	movs	r1, #9
 80043e0:	f7ff ff8e 	bl	8004300 <std>
 80043e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80043e8:	2202      	movs	r2, #2
 80043ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ee:	2112      	movs	r1, #18
 80043f0:	f7ff bf86 	b.w	8004300 <std>
 80043f4:	200002c0 	.word	0x200002c0
 80043f8:	20000188 	.word	0x20000188
 80043fc:	0800436d 	.word	0x0800436d

08004400 <__sfp_lock_acquire>:
 8004400:	4801      	ldr	r0, [pc, #4]	; (8004408 <__sfp_lock_acquire+0x8>)
 8004402:	f000 b9ec 	b.w	80047de <__retarget_lock_acquire_recursive>
 8004406:	bf00      	nop
 8004408:	200002c9 	.word	0x200002c9

0800440c <__sfp_lock_release>:
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <__sfp_lock_release+0x8>)
 800440e:	f000 b9e7 	b.w	80047e0 <__retarget_lock_release_recursive>
 8004412:	bf00      	nop
 8004414:	200002c9 	.word	0x200002c9

08004418 <__sinit>:
 8004418:	b510      	push	{r4, lr}
 800441a:	4604      	mov	r4, r0
 800441c:	f7ff fff0 	bl	8004400 <__sfp_lock_acquire>
 8004420:	6a23      	ldr	r3, [r4, #32]
 8004422:	b11b      	cbz	r3, 800442c <__sinit+0x14>
 8004424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004428:	f7ff bff0 	b.w	800440c <__sfp_lock_release>
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <__sinit+0x28>)
 800442e:	6223      	str	r3, [r4, #32]
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <__sinit+0x2c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f5      	bne.n	8004424 <__sinit+0xc>
 8004438:	f7ff ffc4 	bl	80043c4 <global_stdio_init.part.0>
 800443c:	e7f2      	b.n	8004424 <__sinit+0xc>
 800443e:	bf00      	nop
 8004440:	08004385 	.word	0x08004385
 8004444:	200002c0 	.word	0x200002c0

08004448 <_fwalk_sglue>:
 8004448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800444c:	4607      	mov	r7, r0
 800444e:	4688      	mov	r8, r1
 8004450:	4614      	mov	r4, r2
 8004452:	2600      	movs	r6, #0
 8004454:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004458:	f1b9 0901 	subs.w	r9, r9, #1
 800445c:	d505      	bpl.n	800446a <_fwalk_sglue+0x22>
 800445e:	6824      	ldr	r4, [r4, #0]
 8004460:	2c00      	cmp	r4, #0
 8004462:	d1f7      	bne.n	8004454 <_fwalk_sglue+0xc>
 8004464:	4630      	mov	r0, r6
 8004466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800446a:	89ab      	ldrh	r3, [r5, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d907      	bls.n	8004480 <_fwalk_sglue+0x38>
 8004470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004474:	3301      	adds	r3, #1
 8004476:	d003      	beq.n	8004480 <_fwalk_sglue+0x38>
 8004478:	4629      	mov	r1, r5
 800447a:	4638      	mov	r0, r7
 800447c:	47c0      	blx	r8
 800447e:	4306      	orrs	r6, r0
 8004480:	3568      	adds	r5, #104	; 0x68
 8004482:	e7e9      	b.n	8004458 <_fwalk_sglue+0x10>

08004484 <_puts_r>:
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b570      	push	{r4, r5, r6, lr}
 8004488:	6884      	ldr	r4, [r0, #8]
 800448a:	4605      	mov	r5, r0
 800448c:	460e      	mov	r6, r1
 800448e:	b90b      	cbnz	r3, 8004494 <_puts_r+0x10>
 8004490:	f7ff ffc2 	bl	8004418 <__sinit>
 8004494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004496:	07db      	lsls	r3, r3, #31
 8004498:	d405      	bmi.n	80044a6 <_puts_r+0x22>
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	0598      	lsls	r0, r3, #22
 800449e:	d402      	bmi.n	80044a6 <_puts_r+0x22>
 80044a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044a2:	f000 f99c 	bl	80047de <__retarget_lock_acquire_recursive>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	0719      	lsls	r1, r3, #28
 80044aa:	d513      	bpl.n	80044d4 <_puts_r+0x50>
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	b18b      	cbz	r3, 80044d4 <_puts_r+0x50>
 80044b0:	3e01      	subs	r6, #1
 80044b2:	68a3      	ldr	r3, [r4, #8]
 80044b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044b8:	3b01      	subs	r3, #1
 80044ba:	60a3      	str	r3, [r4, #8]
 80044bc:	b9e9      	cbnz	r1, 80044fa <_puts_r+0x76>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da2e      	bge.n	8004520 <_puts_r+0x9c>
 80044c2:	4622      	mov	r2, r4
 80044c4:	210a      	movs	r1, #10
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f87b 	bl	80045c2 <__swbuf_r>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d007      	beq.n	80044e0 <_puts_r+0x5c>
 80044d0:	250a      	movs	r5, #10
 80044d2:	e007      	b.n	80044e4 <_puts_r+0x60>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f8b0 	bl	800463c <__swsetup_r>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d0e7      	beq.n	80044b0 <_puts_r+0x2c>
 80044e0:	f04f 35ff 	mov.w	r5, #4294967295
 80044e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	d405      	bmi.n	80044f6 <_puts_r+0x72>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	059b      	lsls	r3, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_puts_r+0x72>
 80044f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044f2:	f000 f975 	bl	80047e0 <__retarget_lock_release_recursive>
 80044f6:	4628      	mov	r0, r5
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da04      	bge.n	8004508 <_puts_r+0x84>
 80044fe:	69a2      	ldr	r2, [r4, #24]
 8004500:	429a      	cmp	r2, r3
 8004502:	dc06      	bgt.n	8004512 <_puts_r+0x8e>
 8004504:	290a      	cmp	r1, #10
 8004506:	d004      	beq.n	8004512 <_puts_r+0x8e>
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	7019      	strb	r1, [r3, #0]
 8004510:	e7cf      	b.n	80044b2 <_puts_r+0x2e>
 8004512:	4622      	mov	r2, r4
 8004514:	4628      	mov	r0, r5
 8004516:	f000 f854 	bl	80045c2 <__swbuf_r>
 800451a:	3001      	adds	r0, #1
 800451c:	d1c9      	bne.n	80044b2 <_puts_r+0x2e>
 800451e:	e7df      	b.n	80044e0 <_puts_r+0x5c>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	250a      	movs	r5, #10
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	6022      	str	r2, [r4, #0]
 8004528:	701d      	strb	r5, [r3, #0]
 800452a:	e7db      	b.n	80044e4 <_puts_r+0x60>

0800452c <puts>:
 800452c:	4b02      	ldr	r3, [pc, #8]	; (8004538 <puts+0xc>)
 800452e:	4601      	mov	r1, r0
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f7ff bfa7 	b.w	8004484 <_puts_r>
 8004536:	bf00      	nop
 8004538:	20000064 	.word	0x20000064

0800453c <__sread>:
 800453c:	b510      	push	{r4, lr}
 800453e:	460c      	mov	r4, r1
 8004540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004544:	f000 f8fc 	bl	8004740 <_read_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	bfab      	itete	ge
 800454c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800454e:	89a3      	ldrhlt	r3, [r4, #12]
 8004550:	181b      	addge	r3, r3, r0
 8004552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004556:	bfac      	ite	ge
 8004558:	6563      	strge	r3, [r4, #84]	; 0x54
 800455a:	81a3      	strhlt	r3, [r4, #12]
 800455c:	bd10      	pop	{r4, pc}

0800455e <__swrite>:
 800455e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004562:	461f      	mov	r7, r3
 8004564:	898b      	ldrh	r3, [r1, #12]
 8004566:	05db      	lsls	r3, r3, #23
 8004568:	4605      	mov	r5, r0
 800456a:	460c      	mov	r4, r1
 800456c:	4616      	mov	r6, r2
 800456e:	d505      	bpl.n	800457c <__swrite+0x1e>
 8004570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004574:	2302      	movs	r3, #2
 8004576:	2200      	movs	r2, #0
 8004578:	f000 f8d0 	bl	800471c <_lseek_r>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	4632      	mov	r2, r6
 800458a:	463b      	mov	r3, r7
 800458c:	4628      	mov	r0, r5
 800458e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004592:	f000 b8e7 	b.w	8004764 <_write_r>

08004596 <__sseek>:
 8004596:	b510      	push	{r4, lr}
 8004598:	460c      	mov	r4, r1
 800459a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459e:	f000 f8bd 	bl	800471c <_lseek_r>
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	bf15      	itete	ne
 80045a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80045aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045b2:	81a3      	strheq	r3, [r4, #12]
 80045b4:	bf18      	it	ne
 80045b6:	81a3      	strhne	r3, [r4, #12]
 80045b8:	bd10      	pop	{r4, pc}

080045ba <__sclose>:
 80045ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045be:	f000 b89d 	b.w	80046fc <_close_r>

080045c2 <__swbuf_r>:
 80045c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c4:	460e      	mov	r6, r1
 80045c6:	4614      	mov	r4, r2
 80045c8:	4605      	mov	r5, r0
 80045ca:	b118      	cbz	r0, 80045d4 <__swbuf_r+0x12>
 80045cc:	6a03      	ldr	r3, [r0, #32]
 80045ce:	b90b      	cbnz	r3, 80045d4 <__swbuf_r+0x12>
 80045d0:	f7ff ff22 	bl	8004418 <__sinit>
 80045d4:	69a3      	ldr	r3, [r4, #24]
 80045d6:	60a3      	str	r3, [r4, #8]
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	071a      	lsls	r2, r3, #28
 80045dc:	d525      	bpl.n	800462a <__swbuf_r+0x68>
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	b31b      	cbz	r3, 800462a <__swbuf_r+0x68>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	6922      	ldr	r2, [r4, #16]
 80045e6:	1a98      	subs	r0, r3, r2
 80045e8:	6963      	ldr	r3, [r4, #20]
 80045ea:	b2f6      	uxtb	r6, r6
 80045ec:	4283      	cmp	r3, r0
 80045ee:	4637      	mov	r7, r6
 80045f0:	dc04      	bgt.n	80045fc <__swbuf_r+0x3a>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 fa73 	bl	8004ae0 <_fflush_r>
 80045fa:	b9e0      	cbnz	r0, 8004636 <__swbuf_r+0x74>
 80045fc:	68a3      	ldr	r3, [r4, #8]
 80045fe:	3b01      	subs	r3, #1
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	6022      	str	r2, [r4, #0]
 8004608:	701e      	strb	r6, [r3, #0]
 800460a:	6962      	ldr	r2, [r4, #20]
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	429a      	cmp	r2, r3
 8004610:	d004      	beq.n	800461c <__swbuf_r+0x5a>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	07db      	lsls	r3, r3, #31
 8004616:	d506      	bpl.n	8004626 <__swbuf_r+0x64>
 8004618:	2e0a      	cmp	r6, #10
 800461a:	d104      	bne.n	8004626 <__swbuf_r+0x64>
 800461c:	4621      	mov	r1, r4
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fa5e 	bl	8004ae0 <_fflush_r>
 8004624:	b938      	cbnz	r0, 8004636 <__swbuf_r+0x74>
 8004626:	4638      	mov	r0, r7
 8004628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462a:	4621      	mov	r1, r4
 800462c:	4628      	mov	r0, r5
 800462e:	f000 f805 	bl	800463c <__swsetup_r>
 8004632:	2800      	cmp	r0, #0
 8004634:	d0d5      	beq.n	80045e2 <__swbuf_r+0x20>
 8004636:	f04f 37ff 	mov.w	r7, #4294967295
 800463a:	e7f4      	b.n	8004626 <__swbuf_r+0x64>

0800463c <__swsetup_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <__swsetup_r+0xac>)
 8004640:	4605      	mov	r5, r0
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	460c      	mov	r4, r1
 8004646:	b118      	cbz	r0, 8004650 <__swsetup_r+0x14>
 8004648:	6a03      	ldr	r3, [r0, #32]
 800464a:	b90b      	cbnz	r3, 8004650 <__swsetup_r+0x14>
 800464c:	f7ff fee4 	bl	8004418 <__sinit>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004656:	0718      	lsls	r0, r3, #28
 8004658:	d422      	bmi.n	80046a0 <__swsetup_r+0x64>
 800465a:	06d9      	lsls	r1, r3, #27
 800465c:	d407      	bmi.n	800466e <__swsetup_r+0x32>
 800465e:	2309      	movs	r3, #9
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004666:	81a3      	strh	r3, [r4, #12]
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e034      	b.n	80046d8 <__swsetup_r+0x9c>
 800466e:	0758      	lsls	r0, r3, #29
 8004670:	d512      	bpl.n	8004698 <__swsetup_r+0x5c>
 8004672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004674:	b141      	cbz	r1, 8004688 <__swsetup_r+0x4c>
 8004676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800467a:	4299      	cmp	r1, r3
 800467c:	d002      	beq.n	8004684 <__swsetup_r+0x48>
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f8b0 	bl	80047e4 <_free_r>
 8004684:	2300      	movs	r3, #0
 8004686:	6363      	str	r3, [r4, #52]	; 0x34
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	2300      	movs	r3, #0
 8004692:	6063      	str	r3, [r4, #4]
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	6023      	str	r3, [r4, #0]
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f043 0308 	orr.w	r3, r3, #8
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	b94b      	cbnz	r3, 80046b8 <__swsetup_r+0x7c>
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ae:	d003      	beq.n	80046b8 <__swsetup_r+0x7c>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fa62 	bl	8004b7c <__smakebuf_r>
 80046b8:	89a0      	ldrh	r0, [r4, #12]
 80046ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046be:	f010 0301 	ands.w	r3, r0, #1
 80046c2:	d00a      	beq.n	80046da <__swsetup_r+0x9e>
 80046c4:	2300      	movs	r3, #0
 80046c6:	60a3      	str	r3, [r4, #8]
 80046c8:	6963      	ldr	r3, [r4, #20]
 80046ca:	425b      	negs	r3, r3
 80046cc:	61a3      	str	r3, [r4, #24]
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	b943      	cbnz	r3, 80046e4 <__swsetup_r+0xa8>
 80046d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046d6:	d1c4      	bne.n	8004662 <__swsetup_r+0x26>
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
 80046da:	0781      	lsls	r1, r0, #30
 80046dc:	bf58      	it	pl
 80046de:	6963      	ldrpl	r3, [r4, #20]
 80046e0:	60a3      	str	r3, [r4, #8]
 80046e2:	e7f4      	b.n	80046ce <__swsetup_r+0x92>
 80046e4:	2000      	movs	r0, #0
 80046e6:	e7f7      	b.n	80046d8 <__swsetup_r+0x9c>
 80046e8:	20000064 	.word	0x20000064

080046ec <memset>:
 80046ec:	4402      	add	r2, r0
 80046ee:	4603      	mov	r3, r0
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d100      	bne.n	80046f6 <memset+0xa>
 80046f4:	4770      	bx	lr
 80046f6:	f803 1b01 	strb.w	r1, [r3], #1
 80046fa:	e7f9      	b.n	80046f0 <memset+0x4>

080046fc <_close_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4d06      	ldr	r5, [pc, #24]	; (8004718 <_close_r+0x1c>)
 8004700:	2300      	movs	r3, #0
 8004702:	4604      	mov	r4, r0
 8004704:	4608      	mov	r0, r1
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	f7fc f91d 	bl	8000946 <_close>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_close_r+0x1a>
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	b103      	cbz	r3, 8004716 <_close_r+0x1a>
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	200002c4 	.word	0x200002c4

0800471c <_lseek_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d07      	ldr	r5, [pc, #28]	; (800473c <_lseek_r+0x20>)
 8004720:	4604      	mov	r4, r0
 8004722:	4608      	mov	r0, r1
 8004724:	4611      	mov	r1, r2
 8004726:	2200      	movs	r2, #0
 8004728:	602a      	str	r2, [r5, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	f7fc f932 	bl	8000994 <_lseek>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_lseek_r+0x1e>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_lseek_r+0x1e>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	200002c4 	.word	0x200002c4

08004740 <_read_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d07      	ldr	r5, [pc, #28]	; (8004760 <_read_r+0x20>)
 8004744:	4604      	mov	r4, r0
 8004746:	4608      	mov	r0, r1
 8004748:	4611      	mov	r1, r2
 800474a:	2200      	movs	r2, #0
 800474c:	602a      	str	r2, [r5, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	f7fc f8dc 	bl	800090c <_read>
 8004754:	1c43      	adds	r3, r0, #1
 8004756:	d102      	bne.n	800475e <_read_r+0x1e>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	b103      	cbz	r3, 800475e <_read_r+0x1e>
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	bd38      	pop	{r3, r4, r5, pc}
 8004760:	200002c4 	.word	0x200002c4

08004764 <_write_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d07      	ldr	r5, [pc, #28]	; (8004784 <_write_r+0x20>)
 8004768:	4604      	mov	r4, r0
 800476a:	4608      	mov	r0, r1
 800476c:	4611      	mov	r1, r2
 800476e:	2200      	movs	r2, #0
 8004770:	602a      	str	r2, [r5, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	f7fb ff28 	bl	80005c8 <_write>
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d102      	bne.n	8004782 <_write_r+0x1e>
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	b103      	cbz	r3, 8004782 <_write_r+0x1e>
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	bd38      	pop	{r3, r4, r5, pc}
 8004784:	200002c4 	.word	0x200002c4

08004788 <__errno>:
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <__errno+0x8>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000064 	.word	0x20000064

08004794 <__libc_init_array>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	4d0d      	ldr	r5, [pc, #52]	; (80047cc <__libc_init_array+0x38>)
 8004798:	4c0d      	ldr	r4, [pc, #52]	; (80047d0 <__libc_init_array+0x3c>)
 800479a:	1b64      	subs	r4, r4, r5
 800479c:	10a4      	asrs	r4, r4, #2
 800479e:	2600      	movs	r6, #0
 80047a0:	42a6      	cmp	r6, r4
 80047a2:	d109      	bne.n	80047b8 <__libc_init_array+0x24>
 80047a4:	4d0b      	ldr	r5, [pc, #44]	; (80047d4 <__libc_init_array+0x40>)
 80047a6:	4c0c      	ldr	r4, [pc, #48]	; (80047d8 <__libc_init_array+0x44>)
 80047a8:	f000 fa56 	bl	8004c58 <_init>
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	2600      	movs	r6, #0
 80047b2:	42a6      	cmp	r6, r4
 80047b4:	d105      	bne.n	80047c2 <__libc_init_array+0x2e>
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047bc:	4798      	blx	r3
 80047be:	3601      	adds	r6, #1
 80047c0:	e7ee      	b.n	80047a0 <__libc_init_array+0xc>
 80047c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c6:	4798      	blx	r3
 80047c8:	3601      	adds	r6, #1
 80047ca:	e7f2      	b.n	80047b2 <__libc_init_array+0x1e>
 80047cc:	08004d08 	.word	0x08004d08
 80047d0:	08004d08 	.word	0x08004d08
 80047d4:	08004d08 	.word	0x08004d08
 80047d8:	08004d0c 	.word	0x08004d0c

080047dc <__retarget_lock_init_recursive>:
 80047dc:	4770      	bx	lr

080047de <__retarget_lock_acquire_recursive>:
 80047de:	4770      	bx	lr

080047e0 <__retarget_lock_release_recursive>:
 80047e0:	4770      	bx	lr
	...

080047e4 <_free_r>:
 80047e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047e6:	2900      	cmp	r1, #0
 80047e8:	d044      	beq.n	8004874 <_free_r+0x90>
 80047ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ee:	9001      	str	r0, [sp, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f1a1 0404 	sub.w	r4, r1, #4
 80047f6:	bfb8      	it	lt
 80047f8:	18e4      	addlt	r4, r4, r3
 80047fa:	f000 f8df 	bl	80049bc <__malloc_lock>
 80047fe:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <_free_r+0x94>)
 8004800:	9801      	ldr	r0, [sp, #4]
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	b933      	cbnz	r3, 8004814 <_free_r+0x30>
 8004806:	6063      	str	r3, [r4, #4]
 8004808:	6014      	str	r4, [r2, #0]
 800480a:	b003      	add	sp, #12
 800480c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004810:	f000 b8da 	b.w	80049c8 <__malloc_unlock>
 8004814:	42a3      	cmp	r3, r4
 8004816:	d908      	bls.n	800482a <_free_r+0x46>
 8004818:	6825      	ldr	r5, [r4, #0]
 800481a:	1961      	adds	r1, r4, r5
 800481c:	428b      	cmp	r3, r1
 800481e:	bf01      	itttt	eq
 8004820:	6819      	ldreq	r1, [r3, #0]
 8004822:	685b      	ldreq	r3, [r3, #4]
 8004824:	1949      	addeq	r1, r1, r5
 8004826:	6021      	streq	r1, [r4, #0]
 8004828:	e7ed      	b.n	8004806 <_free_r+0x22>
 800482a:	461a      	mov	r2, r3
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	b10b      	cbz	r3, 8004834 <_free_r+0x50>
 8004830:	42a3      	cmp	r3, r4
 8004832:	d9fa      	bls.n	800482a <_free_r+0x46>
 8004834:	6811      	ldr	r1, [r2, #0]
 8004836:	1855      	adds	r5, r2, r1
 8004838:	42a5      	cmp	r5, r4
 800483a:	d10b      	bne.n	8004854 <_free_r+0x70>
 800483c:	6824      	ldr	r4, [r4, #0]
 800483e:	4421      	add	r1, r4
 8004840:	1854      	adds	r4, r2, r1
 8004842:	42a3      	cmp	r3, r4
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	d1e0      	bne.n	800480a <_free_r+0x26>
 8004848:	681c      	ldr	r4, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	6053      	str	r3, [r2, #4]
 800484e:	440c      	add	r4, r1
 8004850:	6014      	str	r4, [r2, #0]
 8004852:	e7da      	b.n	800480a <_free_r+0x26>
 8004854:	d902      	bls.n	800485c <_free_r+0x78>
 8004856:	230c      	movs	r3, #12
 8004858:	6003      	str	r3, [r0, #0]
 800485a:	e7d6      	b.n	800480a <_free_r+0x26>
 800485c:	6825      	ldr	r5, [r4, #0]
 800485e:	1961      	adds	r1, r4, r5
 8004860:	428b      	cmp	r3, r1
 8004862:	bf04      	itt	eq
 8004864:	6819      	ldreq	r1, [r3, #0]
 8004866:	685b      	ldreq	r3, [r3, #4]
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	bf04      	itt	eq
 800486c:	1949      	addeq	r1, r1, r5
 800486e:	6021      	streq	r1, [r4, #0]
 8004870:	6054      	str	r4, [r2, #4]
 8004872:	e7ca      	b.n	800480a <_free_r+0x26>
 8004874:	b003      	add	sp, #12
 8004876:	bd30      	pop	{r4, r5, pc}
 8004878:	200002cc 	.word	0x200002cc

0800487c <sbrk_aligned>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4e0e      	ldr	r6, [pc, #56]	; (80048b8 <sbrk_aligned+0x3c>)
 8004880:	460c      	mov	r4, r1
 8004882:	6831      	ldr	r1, [r6, #0]
 8004884:	4605      	mov	r5, r0
 8004886:	b911      	cbnz	r1, 800488e <sbrk_aligned+0x12>
 8004888:	f000 f9d6 	bl	8004c38 <_sbrk_r>
 800488c:	6030      	str	r0, [r6, #0]
 800488e:	4621      	mov	r1, r4
 8004890:	4628      	mov	r0, r5
 8004892:	f000 f9d1 	bl	8004c38 <_sbrk_r>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d00a      	beq.n	80048b0 <sbrk_aligned+0x34>
 800489a:	1cc4      	adds	r4, r0, #3
 800489c:	f024 0403 	bic.w	r4, r4, #3
 80048a0:	42a0      	cmp	r0, r4
 80048a2:	d007      	beq.n	80048b4 <sbrk_aligned+0x38>
 80048a4:	1a21      	subs	r1, r4, r0
 80048a6:	4628      	mov	r0, r5
 80048a8:	f000 f9c6 	bl	8004c38 <_sbrk_r>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d101      	bne.n	80048b4 <sbrk_aligned+0x38>
 80048b0:	f04f 34ff 	mov.w	r4, #4294967295
 80048b4:	4620      	mov	r0, r4
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	200002d0 	.word	0x200002d0

080048bc <_malloc_r>:
 80048bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c0:	1ccd      	adds	r5, r1, #3
 80048c2:	f025 0503 	bic.w	r5, r5, #3
 80048c6:	3508      	adds	r5, #8
 80048c8:	2d0c      	cmp	r5, #12
 80048ca:	bf38      	it	cc
 80048cc:	250c      	movcc	r5, #12
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	4607      	mov	r7, r0
 80048d2:	db01      	blt.n	80048d8 <_malloc_r+0x1c>
 80048d4:	42a9      	cmp	r1, r5
 80048d6:	d905      	bls.n	80048e4 <_malloc_r+0x28>
 80048d8:	230c      	movs	r3, #12
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	2600      	movs	r6, #0
 80048de:	4630      	mov	r0, r6
 80048e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049b8 <_malloc_r+0xfc>
 80048e8:	f000 f868 	bl	80049bc <__malloc_lock>
 80048ec:	f8d8 3000 	ldr.w	r3, [r8]
 80048f0:	461c      	mov	r4, r3
 80048f2:	bb5c      	cbnz	r4, 800494c <_malloc_r+0x90>
 80048f4:	4629      	mov	r1, r5
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff ffc0 	bl	800487c <sbrk_aligned>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	4604      	mov	r4, r0
 8004900:	d155      	bne.n	80049ae <_malloc_r+0xf2>
 8004902:	f8d8 4000 	ldr.w	r4, [r8]
 8004906:	4626      	mov	r6, r4
 8004908:	2e00      	cmp	r6, #0
 800490a:	d145      	bne.n	8004998 <_malloc_r+0xdc>
 800490c:	2c00      	cmp	r4, #0
 800490e:	d048      	beq.n	80049a2 <_malloc_r+0xe6>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	4631      	mov	r1, r6
 8004914:	4638      	mov	r0, r7
 8004916:	eb04 0903 	add.w	r9, r4, r3
 800491a:	f000 f98d 	bl	8004c38 <_sbrk_r>
 800491e:	4581      	cmp	r9, r0
 8004920:	d13f      	bne.n	80049a2 <_malloc_r+0xe6>
 8004922:	6821      	ldr	r1, [r4, #0]
 8004924:	1a6d      	subs	r5, r5, r1
 8004926:	4629      	mov	r1, r5
 8004928:	4638      	mov	r0, r7
 800492a:	f7ff ffa7 	bl	800487c <sbrk_aligned>
 800492e:	3001      	adds	r0, #1
 8004930:	d037      	beq.n	80049a2 <_malloc_r+0xe6>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	442b      	add	r3, r5
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	f8d8 3000 	ldr.w	r3, [r8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d038      	beq.n	80049b2 <_malloc_r+0xf6>
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	42a2      	cmp	r2, r4
 8004944:	d12b      	bne.n	800499e <_malloc_r+0xe2>
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e00f      	b.n	800496c <_malloc_r+0xb0>
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	1b52      	subs	r2, r2, r5
 8004950:	d41f      	bmi.n	8004992 <_malloc_r+0xd6>
 8004952:	2a0b      	cmp	r2, #11
 8004954:	d917      	bls.n	8004986 <_malloc_r+0xca>
 8004956:	1961      	adds	r1, r4, r5
 8004958:	42a3      	cmp	r3, r4
 800495a:	6025      	str	r5, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	6059      	strne	r1, [r3, #4]
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	bf08      	it	eq
 8004964:	f8c8 1000 	streq.w	r1, [r8]
 8004968:	5162      	str	r2, [r4, r5]
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	4638      	mov	r0, r7
 800496e:	f104 060b 	add.w	r6, r4, #11
 8004972:	f000 f829 	bl	80049c8 <__malloc_unlock>
 8004976:	f026 0607 	bic.w	r6, r6, #7
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	1af2      	subs	r2, r6, r3
 800497e:	d0ae      	beq.n	80048de <_malloc_r+0x22>
 8004980:	1b9b      	subs	r3, r3, r6
 8004982:	50a3      	str	r3, [r4, r2]
 8004984:	e7ab      	b.n	80048de <_malloc_r+0x22>
 8004986:	42a3      	cmp	r3, r4
 8004988:	6862      	ldr	r2, [r4, #4]
 800498a:	d1dd      	bne.n	8004948 <_malloc_r+0x8c>
 800498c:	f8c8 2000 	str.w	r2, [r8]
 8004990:	e7ec      	b.n	800496c <_malloc_r+0xb0>
 8004992:	4623      	mov	r3, r4
 8004994:	6864      	ldr	r4, [r4, #4]
 8004996:	e7ac      	b.n	80048f2 <_malloc_r+0x36>
 8004998:	4634      	mov	r4, r6
 800499a:	6876      	ldr	r6, [r6, #4]
 800499c:	e7b4      	b.n	8004908 <_malloc_r+0x4c>
 800499e:	4613      	mov	r3, r2
 80049a0:	e7cc      	b.n	800493c <_malloc_r+0x80>
 80049a2:	230c      	movs	r3, #12
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	4638      	mov	r0, r7
 80049a8:	f000 f80e 	bl	80049c8 <__malloc_unlock>
 80049ac:	e797      	b.n	80048de <_malloc_r+0x22>
 80049ae:	6025      	str	r5, [r4, #0]
 80049b0:	e7dc      	b.n	800496c <_malloc_r+0xb0>
 80049b2:	605b      	str	r3, [r3, #4]
 80049b4:	deff      	udf	#255	; 0xff
 80049b6:	bf00      	nop
 80049b8:	200002cc 	.word	0x200002cc

080049bc <__malloc_lock>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__malloc_lock+0x8>)
 80049be:	f7ff bf0e 	b.w	80047de <__retarget_lock_acquire_recursive>
 80049c2:	bf00      	nop
 80049c4:	200002c8 	.word	0x200002c8

080049c8 <__malloc_unlock>:
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <__malloc_unlock+0x8>)
 80049ca:	f7ff bf09 	b.w	80047e0 <__retarget_lock_release_recursive>
 80049ce:	bf00      	nop
 80049d0:	200002c8 	.word	0x200002c8

080049d4 <__sflush_r>:
 80049d4:	898a      	ldrh	r2, [r1, #12]
 80049d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049da:	4605      	mov	r5, r0
 80049dc:	0710      	lsls	r0, r2, #28
 80049de:	460c      	mov	r4, r1
 80049e0:	d458      	bmi.n	8004a94 <__sflush_r+0xc0>
 80049e2:	684b      	ldr	r3, [r1, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	dc05      	bgt.n	80049f4 <__sflush_r+0x20>
 80049e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dc02      	bgt.n	80049f4 <__sflush_r+0x20>
 80049ee:	2000      	movs	r0, #0
 80049f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049f6:	2e00      	cmp	r6, #0
 80049f8:	d0f9      	beq.n	80049ee <__sflush_r+0x1a>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a00:	682f      	ldr	r7, [r5, #0]
 8004a02:	6a21      	ldr	r1, [r4, #32]
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	d032      	beq.n	8004a6e <__sflush_r+0x9a>
 8004a08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	075a      	lsls	r2, r3, #29
 8004a0e:	d505      	bpl.n	8004a1c <__sflush_r+0x48>
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	1ac0      	subs	r0, r0, r3
 8004a14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a16:	b10b      	cbz	r3, 8004a1c <__sflush_r+0x48>
 8004a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a1a:	1ac0      	subs	r0, r0, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a22:	6a21      	ldr	r1, [r4, #32]
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b0      	blx	r6
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	d106      	bne.n	8004a3c <__sflush_r+0x68>
 8004a2e:	6829      	ldr	r1, [r5, #0]
 8004a30:	291d      	cmp	r1, #29
 8004a32:	d82b      	bhi.n	8004a8c <__sflush_r+0xb8>
 8004a34:	4a29      	ldr	r2, [pc, #164]	; (8004adc <__sflush_r+0x108>)
 8004a36:	410a      	asrs	r2, r1
 8004a38:	07d6      	lsls	r6, r2, #31
 8004a3a:	d427      	bmi.n	8004a8c <__sflush_r+0xb8>
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	6062      	str	r2, [r4, #4]
 8004a40:	04d9      	lsls	r1, r3, #19
 8004a42:	6922      	ldr	r2, [r4, #16]
 8004a44:	6022      	str	r2, [r4, #0]
 8004a46:	d504      	bpl.n	8004a52 <__sflush_r+0x7e>
 8004a48:	1c42      	adds	r2, r0, #1
 8004a4a:	d101      	bne.n	8004a50 <__sflush_r+0x7c>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b903      	cbnz	r3, 8004a52 <__sflush_r+0x7e>
 8004a50:	6560      	str	r0, [r4, #84]	; 0x54
 8004a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a54:	602f      	str	r7, [r5, #0]
 8004a56:	2900      	cmp	r1, #0
 8004a58:	d0c9      	beq.n	80049ee <__sflush_r+0x1a>
 8004a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a5e:	4299      	cmp	r1, r3
 8004a60:	d002      	beq.n	8004a68 <__sflush_r+0x94>
 8004a62:	4628      	mov	r0, r5
 8004a64:	f7ff febe 	bl	80047e4 <_free_r>
 8004a68:	2000      	movs	r0, #0
 8004a6a:	6360      	str	r0, [r4, #52]	; 0x34
 8004a6c:	e7c0      	b.n	80049f0 <__sflush_r+0x1c>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b0      	blx	r6
 8004a74:	1c41      	adds	r1, r0, #1
 8004a76:	d1c8      	bne.n	8004a0a <__sflush_r+0x36>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0c5      	beq.n	8004a0a <__sflush_r+0x36>
 8004a7e:	2b1d      	cmp	r3, #29
 8004a80:	d001      	beq.n	8004a86 <__sflush_r+0xb2>
 8004a82:	2b16      	cmp	r3, #22
 8004a84:	d101      	bne.n	8004a8a <__sflush_r+0xb6>
 8004a86:	602f      	str	r7, [r5, #0]
 8004a88:	e7b1      	b.n	80049ee <__sflush_r+0x1a>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	e7ad      	b.n	80049f0 <__sflush_r+0x1c>
 8004a94:	690f      	ldr	r7, [r1, #16]
 8004a96:	2f00      	cmp	r7, #0
 8004a98:	d0a9      	beq.n	80049ee <__sflush_r+0x1a>
 8004a9a:	0793      	lsls	r3, r2, #30
 8004a9c:	680e      	ldr	r6, [r1, #0]
 8004a9e:	bf08      	it	eq
 8004aa0:	694b      	ldreq	r3, [r1, #20]
 8004aa2:	600f      	str	r7, [r1, #0]
 8004aa4:	bf18      	it	ne
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	eba6 0807 	sub.w	r8, r6, r7
 8004aac:	608b      	str	r3, [r1, #8]
 8004aae:	f1b8 0f00 	cmp.w	r8, #0
 8004ab2:	dd9c      	ble.n	80049ee <__sflush_r+0x1a>
 8004ab4:	6a21      	ldr	r1, [r4, #32]
 8004ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ab8:	4643      	mov	r3, r8
 8004aba:	463a      	mov	r2, r7
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b0      	blx	r6
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	dc06      	bgt.n	8004ad2 <__sflush_r+0xfe>
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	e78e      	b.n	80049f0 <__sflush_r+0x1c>
 8004ad2:	4407      	add	r7, r0
 8004ad4:	eba8 0800 	sub.w	r8, r8, r0
 8004ad8:	e7e9      	b.n	8004aae <__sflush_r+0xda>
 8004ada:	bf00      	nop
 8004adc:	dfbffffe 	.word	0xdfbffffe

08004ae0 <_fflush_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	690b      	ldr	r3, [r1, #16]
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	b913      	cbnz	r3, 8004af0 <_fflush_r+0x10>
 8004aea:	2500      	movs	r5, #0
 8004aec:	4628      	mov	r0, r5
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	b118      	cbz	r0, 8004afa <_fflush_r+0x1a>
 8004af2:	6a03      	ldr	r3, [r0, #32]
 8004af4:	b90b      	cbnz	r3, 8004afa <_fflush_r+0x1a>
 8004af6:	f7ff fc8f 	bl	8004418 <__sinit>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f3      	beq.n	8004aea <_fflush_r+0xa>
 8004b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b04:	07d0      	lsls	r0, r2, #31
 8004b06:	d404      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b08:	0599      	lsls	r1, r3, #22
 8004b0a:	d402      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b0e:	f7ff fe66 	bl	80047de <__retarget_lock_acquire_recursive>
 8004b12:	4628      	mov	r0, r5
 8004b14:	4621      	mov	r1, r4
 8004b16:	f7ff ff5d 	bl	80049d4 <__sflush_r>
 8004b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b1c:	07da      	lsls	r2, r3, #31
 8004b1e:	4605      	mov	r5, r0
 8004b20:	d4e4      	bmi.n	8004aec <_fflush_r+0xc>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	059b      	lsls	r3, r3, #22
 8004b26:	d4e1      	bmi.n	8004aec <_fflush_r+0xc>
 8004b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2a:	f7ff fe59 	bl	80047e0 <__retarget_lock_release_recursive>
 8004b2e:	e7dd      	b.n	8004aec <_fflush_r+0xc>

08004b30 <__swhatbuf_r>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	460c      	mov	r4, r1
 8004b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	b096      	sub	sp, #88	; 0x58
 8004b3c:	4615      	mov	r5, r2
 8004b3e:	461e      	mov	r6, r3
 8004b40:	da0d      	bge.n	8004b5e <__swhatbuf_r+0x2e>
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	bf0c      	ite	eq
 8004b4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b52:	2340      	movne	r3, #64	; 0x40
 8004b54:	2000      	movs	r0, #0
 8004b56:	6031      	str	r1, [r6, #0]
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	b016      	add	sp, #88	; 0x58
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
 8004b5e:	466a      	mov	r2, sp
 8004b60:	f000 f848 	bl	8004bf4 <_fstat_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	dbec      	blt.n	8004b42 <__swhatbuf_r+0x12>
 8004b68:	9901      	ldr	r1, [sp, #4]
 8004b6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b72:	4259      	negs	r1, r3
 8004b74:	4159      	adcs	r1, r3
 8004b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7a:	e7eb      	b.n	8004b54 <__swhatbuf_r+0x24>

08004b7c <__smakebuf_r>:
 8004b7c:	898b      	ldrh	r3, [r1, #12]
 8004b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b80:	079d      	lsls	r5, r3, #30
 8004b82:	4606      	mov	r6, r0
 8004b84:	460c      	mov	r4, r1
 8004b86:	d507      	bpl.n	8004b98 <__smakebuf_r+0x1c>
 8004b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	2301      	movs	r3, #1
 8004b92:	6163      	str	r3, [r4, #20]
 8004b94:	b002      	add	sp, #8
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	ab01      	add	r3, sp, #4
 8004b9a:	466a      	mov	r2, sp
 8004b9c:	f7ff ffc8 	bl	8004b30 <__swhatbuf_r>
 8004ba0:	9900      	ldr	r1, [sp, #0]
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f7ff fe89 	bl	80048bc <_malloc_r>
 8004baa:	b948      	cbnz	r0, 8004bc0 <__smakebuf_r+0x44>
 8004bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb0:	059a      	lsls	r2, r3, #22
 8004bb2:	d4ef      	bmi.n	8004b94 <__smakebuf_r+0x18>
 8004bb4:	f023 0303 	bic.w	r3, r3, #3
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	e7e3      	b.n	8004b88 <__smakebuf_r+0xc>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	6020      	str	r0, [r4, #0]
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	9b00      	ldr	r3, [sp, #0]
 8004bcc:	6163      	str	r3, [r4, #20]
 8004bce:	9b01      	ldr	r3, [sp, #4]
 8004bd0:	6120      	str	r0, [r4, #16]
 8004bd2:	b15b      	cbz	r3, 8004bec <__smakebuf_r+0x70>
 8004bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f81d 	bl	8004c18 <_isatty_r>
 8004bde:	b128      	cbz	r0, 8004bec <__smakebuf_r+0x70>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	81a3      	strh	r3, [r4, #12]
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	431d      	orrs	r5, r3
 8004bf0:	81a5      	strh	r5, [r4, #12]
 8004bf2:	e7cf      	b.n	8004b94 <__smakebuf_r+0x18>

08004bf4 <_fstat_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d07      	ldr	r5, [pc, #28]	; (8004c14 <_fstat_r+0x20>)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	f7fb feac 	bl	800095e <_fstat>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	d102      	bne.n	8004c10 <_fstat_r+0x1c>
 8004c0a:	682b      	ldr	r3, [r5, #0]
 8004c0c:	b103      	cbz	r3, 8004c10 <_fstat_r+0x1c>
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
 8004c12:	bf00      	nop
 8004c14:	200002c4 	.word	0x200002c4

08004c18 <_isatty_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4d06      	ldr	r5, [pc, #24]	; (8004c34 <_isatty_r+0x1c>)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4608      	mov	r0, r1
 8004c22:	602b      	str	r3, [r5, #0]
 8004c24:	f7fb feab 	bl	800097e <_isatty>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_isatty_r+0x1a>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_isatty_r+0x1a>
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	200002c4 	.word	0x200002c4

08004c38 <_sbrk_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d06      	ldr	r5, [pc, #24]	; (8004c54 <_sbrk_r+0x1c>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fb feb4 	bl	80009b0 <_sbrk>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_sbrk_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_sbrk_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	200002c4 	.word	0x200002c4

08004c58 <_init>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	bf00      	nop
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr

08004c64 <_fini>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr
